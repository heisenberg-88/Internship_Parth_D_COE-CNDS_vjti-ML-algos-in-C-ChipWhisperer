
simpleserial-base-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd8  08002dd8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd8  08002dd8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd8  08002dd8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000064  08002e44  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000210  08002e44  00020210  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d33  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d5a  00000000  00000000  00024dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000021ba  00000000  00000000  00025b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00027cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000450  00000000  00000000  00027e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025e3  00000000  00000000  000282d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000179c  00000000  00000000  0002a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002c054  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010ac  00000000  00000000  0002c0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000001ec  00000000  00000000  0002d150  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001c9  00000000  00000000  0002d33c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c08 	.word	0x08002c08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08002c08 	.word	0x08002c08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <get_key>:

uint8_t get_key(uint8_t* k, uint8_t len)
{
	// Load key here
	return 0x00;
}
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr

08000274 <get_pt>:
uint8_t get_pt(uint8_t cmd ,uint8_t scmd,uint8_t len,uint8_t* pt)
#else
uint8_t get_pt(uint8_t* pt, uint8_t len)
#endif
    
{
 8000274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000278:	b085      	sub	sp, #20
 800027a:	4680      	mov	r8, r0
	/**********************************
	* Start user-specific code here. */
	trigger_high();
 800027c:	f000 fa44 	bl	8000708 <trigger_high>
        //linr
    float x,y,m,c,d;
    int n = 84;
    float sumx=0,sumxsq=0,sumy=0,sumxy=0;

    FILE* file = fopen("LinData.txt","r");
 8000280:	4925      	ldr	r1, [pc, #148]	; (8000318 <get_pt+0xa4>)
 8000282:	4826      	ldr	r0, [pc, #152]	; (800031c <get_pt+0xa8>)
    float numy;
    float* ydata = malloc(sizeof(float)*n);
    float* xdata = malloc(sizeof(float)*n);

    for(int i=0;i<n;i++){
        fscanf(file,"%f",&numx);
 8000284:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8000320 <get_pt+0xac>
    FILE* file = fopen("LinData.txt","r");
 8000288:	f001 f930 	bl	80014ec <fopen>
 800028c:	4604      	mov	r4, r0
    float* ydata = malloc(sizeof(float)*n);
 800028e:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8000292:	f001 faed 	bl	8001870 <malloc>
 8000296:	4607      	mov	r7, r0
    float* xdata = malloc(sizeof(float)*n);
 8000298:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800029c:	f001 fae8 	bl	8001870 <malloc>
    for(int i=0;i<n;i++){
 80002a0:	2500      	movs	r5, #0
    float* xdata = malloc(sizeof(float)*n);
 80002a2:	4606      	mov	r6, r0
        fscanf(file,"%f",&numx);
 80002a4:	aa01      	add	r2, sp, #4
 80002a6:	4649      	mov	r1, r9
 80002a8:	4620      	mov	r0, r4
 80002aa:	f001 f927 	bl	80014fc <fiscanf>
        x = numx;
        fseek(file,1,SEEK_CUR);
 80002ae:	2201      	movs	r2, #1
 80002b0:	4611      	mov	r1, r2
 80002b2:	4620      	mov	r0, r4
 80002b4:	f001 f936 	bl	8001524 <fseek>
        fscanf(file,"%f",&numy);
 80002b8:	aa02      	add	r2, sp, #8
 80002ba:	4649      	mov	r1, r9
 80002bc:	4620      	mov	r0, r4
 80002be:	f001 f91d 	bl	80014fc <fiscanf>
        y = numy;
        ydata[i] = numy;
 80002c2:	9b02      	ldr	r3, [sp, #8]
 80002c4:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
        sumx=sumx+x;
        sumxsq=sumxsq+(x*x);
        sumy=sumy+y;
        sumxy=sumxy+(x*y);

        fseek(file,1,SEEK_CUR);
 80002c8:	2201      	movs	r2, #1
        xdata[i] = numx;
 80002ca:	9b01      	ldr	r3, [sp, #4]
 80002cc:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
        fseek(file,1,SEEK_CUR);
 80002d0:	4611      	mov	r1, r2
 80002d2:	4620      	mov	r0, r4
    for(int i=0;i<n;i++){
 80002d4:	3501      	adds	r5, #1
        fseek(file,1,SEEK_CUR);
 80002d6:	f001 f925 	bl	8001524 <fseek>
    for(int i=0;i<n;i++){
 80002da:	2d54      	cmp	r5, #84	; 0x54
 80002dc:	d1e2      	bne.n	80002a4 <get_pt+0x30>
    c=(sumy*sumxsq-sumx*sumxy)/d;
    
    float ans = avgError(xdata,ydata,n,m,c);
//     printf("accuracy : %f ",100.00 - ans*100.00);

    free(ydata);
 80002de:	4638      	mov	r0, r7
 80002e0:	f001 face 	bl	8001880 <free>
    free(xdata);
 80002e4:	4630      	mov	r0, r6
 80002e6:	f001 facb 	bl	8001880 <free>
    for(volatile unsigned int i=0;i<0xfff;i++){
 80002ea:	2300      	movs	r3, #0
 80002ec:	9303      	str	r3, [sp, #12]
 80002ee:	f640 72fe 	movw	r2, #4094	; 0xffe
 80002f2:	9b03      	ldr	r3, [sp, #12]
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d90a      	bls.n	800030e <get_pt+0x9a>
    
    delay_2ms();
	trigger_low();
 80002f8:	f000 fa0d 	bl	8000716 <trigger_low>
	/* End user-specific code here. *
	********************************/
	simpleserial_put('r', 16, pt);
 80002fc:	4642      	mov	r2, r8
 80002fe:	2110      	movs	r1, #16
 8000300:	2072      	movs	r0, #114	; 0x72
 8000302:	f000 f8a1 	bl	8000448 <simpleserial_put>
	return 0x00;
}
 8000306:	2000      	movs	r0, #0
 8000308:	b005      	add	sp, #20
 800030a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for(volatile unsigned int i=0;i<0xfff;i++){
 800030e:	9b03      	ldr	r3, [sp, #12]
 8000310:	3301      	adds	r3, #1
 8000312:	9303      	str	r3, [sp, #12]
 8000314:	e7ed      	b.n	80002f2 <get_pt+0x7e>
 8000316:	bf00      	nop
 8000318:	08002c40 	.word	0x08002c40
 800031c:	08002c42 	.word	0x08002c42
 8000320:	08002c4e 	.word	0x08002c4e

08000324 <reset>:
 8000324:	2000      	movs	r0, #0
 8000326:	4770      	bx	lr

08000328 <main>:
}



int main(void)
{
 8000328:	b508      	push	{r3, lr}
    platform_init();
 800032a:	f000 f94b 	bl	80005c4 <platform_init>
	init_uart();
 800032e:	f000 f989 	bl	8000644 <init_uart>
	trigger_setup();
 8000332:	f000 f9c5 	bl	80006c0 <trigger_setup>
	putch('l');
	putch('o');
	putch('\n');
	*/

	simpleserial_init();
 8000336:	f000 f871 	bl	800041c <simpleserial_init>
	simpleserial_addcmd('p', 16, get_pt);
 800033a:	4a09      	ldr	r2, [pc, #36]	; (8000360 <main+0x38>)
 800033c:	2110      	movs	r1, #16
 800033e:	2070      	movs	r0, #112	; 0x70
 8000340:	f000 f868 	bl	8000414 <simpleserial_addcmd>
#if SS_VER != SS_VER_2_0
	simpleserial_addcmd('k', 16, get_key);
 8000344:	4a07      	ldr	r2, [pc, #28]	; (8000364 <main+0x3c>)
 8000346:	2110      	movs	r1, #16
 8000348:	206b      	movs	r0, #107	; 0x6b
 800034a:	f000 f863 	bl	8000414 <simpleserial_addcmd>
	simpleserial_addcmd('x', 0, reset);
 800034e:	4a06      	ldr	r2, [pc, #24]	; (8000368 <main+0x40>)
 8000350:	2100      	movs	r1, #0
 8000352:	2078      	movs	r0, #120	; 0x78
 8000354:	f000 f85e 	bl	8000414 <simpleserial_addcmd>
#endif
	while(1)
		simpleserial_get();
 8000358:	f000 f8d0 	bl	80004fc <simpleserial_get>
	while(1)
 800035c:	e7fc      	b.n	8000358 <main+0x30>
 800035e:	bf00      	nop
 8000360:	08000275 	.word	0x08000275
 8000364:	08000271 	.word	0x08000271
 8000368:	08000325 	.word	0x08000325

0800036c <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 800036c:	2001      	movs	r0, #1
 800036e:	4770      	bx	lr

08000370 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < len; i++)
 8000372:	2500      	movs	r5, #0
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 8000374:	1c4f      	adds	r7, r1, #1
	for(int i = 0; i < len; i++)
 8000376:	4285      	cmp	r5, r0
 8000378:	db01      	blt.n	800037e <hex_decode+0xe>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 800037a:	2000      	movs	r0, #0
 800037c:	e021      	b.n	80003c2 <hex_decode+0x52>
		char n_lo = ascii_buf[2*i+1];
 800037e:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
		char n_hi = ascii_buf[2*i];
 8000382:	f811 3015 	ldrb.w	r3, [r1, r5, lsl #1]
		if(n_lo >= '0' && n_lo <= '9')
 8000386:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800038a:	b2f6      	uxtb	r6, r6
 800038c:	2e09      	cmp	r6, #9
 800038e:	d80c      	bhi.n	80003aa <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 8000390:	7016      	strb	r6, [r2, #0]
		if(n_hi >= '0' && n_hi <= '9')
 8000392:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8000396:	b2e6      	uxtb	r6, r4
 8000398:	2e09      	cmp	r6, #9
 800039a:	d815      	bhi.n	80003c8 <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 800039c:	7813      	ldrb	r3, [r2, #0]
 800039e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80003a2:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < len; i++)
 80003a4:	3501      	adds	r5, #1
 80003a6:	3201      	adds	r2, #1
 80003a8:	e7e5      	b.n	8000376 <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 80003aa:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80003ae:	2e05      	cmp	r6, #5
 80003b0:	d802      	bhi.n	80003b8 <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 80003b2:	3c37      	subs	r4, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 80003b4:	7014      	strb	r4, [r2, #0]
 80003b6:	e7ec      	b.n	8000392 <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 80003b8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80003bc:	2e05      	cmp	r6, #5
 80003be:	d901      	bls.n	80003c4 <hex_decode+0x54>
			return 1;
 80003c0:	2001      	movs	r0, #1
}
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_buf[i] = n_lo - 'a' + 10;
 80003c4:	3c57      	subs	r4, #87	; 0x57
 80003c6:	e7f5      	b.n	80003b4 <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 80003c8:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 80003cc:	2c05      	cmp	r4, #5
 80003ce:	d802      	bhi.n	80003d6 <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80003d0:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 80003d4:	e7e2      	b.n	800039c <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 80003d6:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 80003da:	2c05      	cmp	r4, #5
 80003dc:	d8f0      	bhi.n	80003c0 <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80003de:	7814      	ldrb	r4, [r2, #0]
 80003e0:	3b57      	subs	r3, #87	; 0x57
 80003e2:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 80003e6:	e7dc      	b.n	80003a2 <hex_decode+0x32>

080003e8 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 80003e8:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 80003ea:	4e09      	ldr	r6, [pc, #36]	; (8000410 <simpleserial_addcmd_flags+0x28>)
 80003ec:	6834      	ldr	r4, [r6, #0]
 80003ee:	2c0f      	cmp	r4, #15
 80003f0:	dc0b      	bgt.n	800040a <simpleserial_addcmd_flags+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 80003f2:	29ff      	cmp	r1, #255	; 0xff
 80003f4:	d809      	bhi.n	800040a <simpleserial_addcmd_flags+0x22>
		return 1;

	commands[num_commands].c   = c;
 80003f6:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
 80003fa:	e9c5 1202 	strd	r1, r2, [r5, #8]
	commands[num_commands].flags = fl;
	num_commands++;
 80003fe:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8000400:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 8000402:	742b      	strb	r3, [r5, #16]
	num_commands++;
 8000404:	6034      	str	r4, [r6, #0]

	return 0;
 8000406:	2000      	movs	r0, #0
}
 8000408:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 800040a:	2001      	movs	r0, #1
 800040c:	e7fc      	b.n	8000408 <simpleserial_addcmd_flags+0x20>
 800040e:	bf00      	nop
 8000410:	20000080 	.word	0x20000080

08000414 <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8000414:	2300      	movs	r3, #0
 8000416:	f7ff bfe7 	b.w	80003e8 <simpleserial_addcmd_flags>
 800041a:	0000      	movs	r0, r0

0800041c <simpleserial_init>:
{
 800041c:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 800041e:	4a07      	ldr	r2, [pc, #28]	; (800043c <simpleserial_init+0x20>)
 8000420:	2100      	movs	r1, #0
 8000422:	2076      	movs	r0, #118	; 0x76
 8000424:	f7ff fff6 	bl	8000414 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000428:	4a05      	ldr	r2, [pc, #20]	; (8000440 <simpleserial_init+0x24>)
 800042a:	2077      	movs	r0, #119	; 0x77
 800042c:	f7ff fff2 	bl	8000414 <simpleserial_addcmd>
}
 8000430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 8000434:	4a03      	ldr	r2, [pc, #12]	; (8000444 <simpleserial_init+0x28>)
 8000436:	2079      	movs	r0, #121	; 0x79
 8000438:	f7ff bfec 	b.w	8000414 <simpleserial_addcmd>
 800043c:	0800036d 	.word	0x0800036d
 8000440:	080004ad 	.word	0x080004ad
 8000444:	08000489 	.word	0x08000489

08000448 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	4614      	mov	r4, r2
 800044c:	460e      	mov	r6, r1
	// Write first character
	putch(c);
 800044e:	f000 f983 	bl	8000758 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8000452:	4f0c      	ldr	r7, [pc, #48]	; (8000484 <simpleserial_put+0x3c>)
 8000454:	1e65      	subs	r5, r4, #1
	for(int i = 0; i < size; i++)
 8000456:	f1c4 0401 	rsb	r4, r4, #1
 800045a:	1963      	adds	r3, r4, r5
 800045c:	429e      	cmp	r6, r3
 800045e:	dc04      	bgt.n	800046a <simpleserial_put+0x22>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
}
 8000460:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 8000464:	200a      	movs	r0, #10
 8000466:	f000 b977 	b.w	8000758 <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 800046a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800046e:	091b      	lsrs	r3, r3, #4
 8000470:	5cf8      	ldrb	r0, [r7, r3]
 8000472:	f000 f971 	bl	8000758 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8000476:	782b      	ldrb	r3, [r5, #0]
 8000478:	f003 030f 	and.w	r3, r3, #15
 800047c:	5cf8      	ldrb	r0, [r7, r3]
 800047e:	f000 f96b 	bl	8000758 <putch>
	for(int i = 0; i < size; i++)
 8000482:	e7ea      	b.n	800045a <simpleserial_put+0x12>
 8000484:	08002c20 	.word	0x08002c20

08000488 <ss_num_commands>:
{
 8000488:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <ss_num_commands+0x20>)
    simpleserial_put('r', 0x01, &ncmds);
 800048c:	f10d 0207 	add.w	r2, sp, #7
    uint8_t ncmds = num_commands & 0xFF;
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f88d 3007 	strb.w	r3, [sp, #7]
    simpleserial_put('r', 0x01, &ncmds);
 8000496:	2101      	movs	r1, #1
 8000498:	2072      	movs	r0, #114	; 0x72
 800049a:	f7ff ffd5 	bl	8000448 <simpleserial_put>
}
 800049e:	2000      	movs	r0, #0
 80004a0:	b003      	add	sp, #12
 80004a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80004a6:	bf00      	nop
 80004a8:	20000080 	.word	0x20000080

080004ac <ss_get_commands>:
{
 80004ac:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80004ae:	4c12      	ldr	r4, [pc, #72]	; (80004f8 <ss_get_commands+0x4c>)
 80004b0:	6821      	ldr	r1, [r4, #0]
{
 80004b2:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80004b4:	b2cd      	uxtb	r5, r1
 80004b6:	2000      	movs	r0, #0
 80004b8:	b2c3      	uxtb	r3, r0
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f100 0001 	add.w	r0, r0, #1
 80004c0:	db09      	blt.n	80004d6 <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 80004c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80004c6:	466a      	mov	r2, sp
 80004c8:	b2c9      	uxtb	r1, r1
 80004ca:	2072      	movs	r0, #114	; 0x72
 80004cc:	f7ff ffbc 	bl	8000448 <simpleserial_put>
}
 80004d0:	2000      	movs	r0, #0
 80004d2:	b00c      	add	sp, #48	; 0x30
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 80004d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80004da:	ae0c      	add	r6, sp, #48	; 0x30
 80004dc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80004e0:	4432      	add	r2, r6
 80004e2:	791e      	ldrb	r6, [r3, #4]
 80004e4:	f802 6c30 	strb.w	r6, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
 80004e8:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 80004ea:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 80004ec:	f802 6c2f 	strb.w	r6, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
 80004f0:	f802 3c2e 	strb.w	r3, [r2, #-46]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80004f4:	e7e0      	b.n	80004b8 <ss_get_commands+0xc>
 80004f6:	bf00      	nop
 80004f8:	20000080 	.word	0x20000080

080004fc <simpleserial_get>:
{
 80004fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 8000500:	4d2f      	ldr	r5, [pc, #188]	; (80005c0 <simpleserial_get+0xc4>)
{
 8000502:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
	c = getch();
 8000506:	f000 f90d 	bl	8000724 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 800050a:	462a      	mov	r2, r5
 800050c:	2300      	movs	r3, #0
 800050e:	f852 1b04 	ldr.w	r1, [r2], #4
 8000512:	4299      	cmp	r1, r3
 8000514:	dc04      	bgt.n	8000520 <simpleserial_get+0x24>
	if(cmd == num_commands)
 8000516:	d107      	bne.n	8000528 <simpleserial_get+0x2c>
}
 8000518:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 800051c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 8000520:	011c      	lsls	r4, r3, #4
 8000522:	5ca4      	ldrb	r4, [r4, r2]
 8000524:	4284      	cmp	r4, r0
 8000526:	d13e      	bne.n	80005a6 <simpleserial_get+0xaa>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8000528:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 800052c:	011e      	lsls	r6, r3, #4
 800052e:	7c23      	ldrb	r3, [r4, #16]
 8000530:	07db      	lsls	r3, r3, #31
 8000532:	d514      	bpl.n	800055e <simpleserial_get+0x62>
		uint8_t l = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 800053a:	f000 f8f3 	bl	8000724 <getch>
 800053e:	f88d 0108 	strb.w	r0, [sp, #264]	; 0x108
		buff[1] = getch();
 8000542:	f000 f8ef 	bl	8000724 <getch>
		if (hex_decode(1, buff, &l))
 8000546:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 8000548:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
		if (hex_decode(1, buff, &l))
 800054c:	a942      	add	r1, sp, #264	; 0x108
 800054e:	2001      	movs	r0, #1
 8000550:	f7ff ff0e 	bl	8000370 <hex_decode>
 8000554:	2800      	cmp	r0, #0
 8000556:	d1df      	bne.n	8000518 <simpleserial_get+0x1c>
		commands[cmd].len = l;
 8000558:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800055c:	60a3      	str	r3, [r4, #8]
 800055e:	af42      	add	r7, sp, #264	; 0x108
	for(cmd = 0; cmd < num_commands; cmd++)
 8000560:	2400      	movs	r4, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000562:	eb05 0806 	add.w	r8, r5, r6
 8000566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800056a:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 800056e:	d31c      	bcc.n	80005aa <simpleserial_get+0xae>
	c = getch();
 8000570:	f000 f8d8 	bl	8000724 <getch>
	if(c != '\n' && c != '\r')
 8000574:	280a      	cmp	r0, #10
 8000576:	d001      	beq.n	800057c <simpleserial_get+0x80>
 8000578:	280d      	cmp	r0, #13
 800057a:	d1cd      	bne.n	8000518 <simpleserial_get+0x1c>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 800057c:	4435      	add	r5, r6
 800057e:	aa02      	add	r2, sp, #8
 8000580:	68ac      	ldr	r4, [r5, #8]
 8000582:	a942      	add	r1, sp, #264	; 0x108
 8000584:	4620      	mov	r0, r4
 8000586:	f7ff fef3 	bl	8000370 <hex_decode>
 800058a:	2800      	cmp	r0, #0
 800058c:	d1c4      	bne.n	8000518 <simpleserial_get+0x1c>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800058e:	b2e1      	uxtb	r1, r4
 8000590:	68eb      	ldr	r3, [r5, #12]
 8000592:	a802      	add	r0, sp, #8
 8000594:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 8000596:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8000598:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 800059c:	2101      	movs	r1, #1
 800059e:	207a      	movs	r0, #122	; 0x7a
 80005a0:	f7ff ff52 	bl	8000448 <simpleserial_put>
 80005a4:	e7b8      	b.n	8000518 <simpleserial_get+0x1c>
	for(cmd = 0; cmd < num_commands; cmd++)
 80005a6:	3301      	adds	r3, #1
 80005a8:	e7b3      	b.n	8000512 <simpleserial_get+0x16>
		c = getch();
 80005aa:	f000 f8bb 	bl	8000724 <getch>
		if(c == '\n' || c == '\r')
 80005ae:	280a      	cmp	r0, #10
 80005b0:	d0b2      	beq.n	8000518 <simpleserial_get+0x1c>
 80005b2:	280d      	cmp	r0, #13
 80005b4:	d0b0      	beq.n	8000518 <simpleserial_get+0x1c>
		ascii_buf[i] = c;
 80005b6:	f807 0b01 	strb.w	r0, [r7], #1
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80005ba:	3401      	adds	r4, #1
 80005bc:	e7d3      	b.n	8000566 <simpleserial_get+0x6a>
 80005be:	bf00      	nop
 80005c0:	20000080 	.word	0x20000080

080005c4 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80005c8:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80005ca:	2603      	movs	r6, #3
 80005cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005d0:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80005d2:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80005d4:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80005d8:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80005da:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005dc:	f000 f8d4 	bl	8000788 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80005e0:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80005e2:	4621      	mov	r1, r4
 80005e4:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80005e6:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80005f0:	f000 fb38 	bl	8000c64 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <platform_init+0x78>)
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80005fc:	615a      	str	r2, [r3, #20]
 80005fe:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000600:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000608:	4c0d      	ldr	r4, [pc, #52]	; (8000640 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800060e:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000610:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000614:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000616:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800061a:	f000 fbc9 	bl	8000db0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800061e:	462a      	mov	r2, r5
 8000620:	4620      	mov	r0, r4
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	f000 fc87 	bl	8000f38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 800062a:	462a      	mov	r2, r5
 800062c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000630:	4620      	mov	r0, r4
 8000632:	f000 fc81 	bl	8000f38 <HAL_GPIO_WritePin>
#endif
}
 8000636:	b016      	add	sp, #88	; 0x58
 8000638:	bd70      	pop	{r4, r5, r6, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800

08000644 <init_uart>:

void init_uart(void)
{
 8000644:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000646:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 800064a:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000652:	2101      	movs	r1, #1
 8000654:	2303      	movs	r3, #3
 8000656:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 800065a:	4c16      	ldr	r4, [pc, #88]	; (80006b4 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 800065c:	2307      	movs	r3, #7
 800065e:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000660:	6963      	ldr	r3, [r4, #20]
 8000662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000666:	6163      	str	r3, [r4, #20]
 8000668:	6963      	ldr	r3, [r4, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000670:	a903      	add	r1, sp, #12
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8000676:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000678:	f000 fb9a 	bl	8000db0 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 800067c:	480e      	ldr	r0, [pc, #56]	; (80006b8 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 800067e:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80006bc <init_uart+0x78>
 8000682:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000686:	e9c0 c300 	strd	ip, r3, [r0]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800068c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000690:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000692:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000694:	230c      	movs	r3, #12
 8000696:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8000698:	69a3      	ldr	r3, [r4, #24]
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	61a3      	str	r3, [r4, #24]
 80006a0:	69a3      	ldr	r3, [r4, #24]
 80006a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 80006aa:	f000 fd99 	bl	80011e0 <HAL_UART_Init>
}
 80006ae:	b008      	add	sp, #32
 80006b0:	bd10      	pop	{r4, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	20000184 	.word	0x20000184
 80006bc:	40013800 	.word	0x40013800

080006c0 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <trigger_setup+0x44>)
{
 80006c2:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	695b      	ldr	r3, [r3, #20]
{
 80006ce:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80006d8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80006dc:	2301      	movs	r3, #1
 80006de:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80006e2:	2500      	movs	r5, #0
 80006e4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80006e6:	a901      	add	r1, sp, #4
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80006ec:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80006f0:	f000 fb5e 	bl	8000db0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80006f4:	462a      	mov	r2, r5
 80006f6:	4621      	mov	r1, r4
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f000 fc1c 	bl	8000f38 <HAL_GPIO_WritePin>
}
 8000700:	b007      	add	sp, #28
 8000702:	bd30      	pop	{r4, r5, pc}
 8000704:	40021000 	.word	0x40021000

08000708 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f000 bc11 	b.w	8000f38 <HAL_GPIO_WritePin>

08000716 <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f000 bc0a 	b.w	8000f38 <HAL_GPIO_WritePin>

08000724 <getch>:
}

char getch(void)
{
 8000724:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000726:	4d0a      	ldr	r5, [pc, #40]	; (8000750 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8000728:	4c0a      	ldr	r4, [pc, #40]	; (8000754 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 800072a:	f241 3388 	movw	r3, #5000	; 0x1388
 800072e:	2201      	movs	r2, #1
 8000730:	f10d 0107 	add.w	r1, sp, #7
 8000734:	4628      	mov	r0, r5
 8000736:	f000 fdd4 	bl	80012e2 <HAL_UART_Receive>
 800073a:	b918      	cbnz	r0, 8000744 <getch+0x20>
  //putch(d);
  return d;
}
 800073c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000740:	b003      	add	sp, #12
 8000742:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8000744:	6a23      	ldr	r3, [r4, #32]
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	6223      	str	r3, [r4, #32]
 800074c:	e7ed      	b.n	800072a <getch+0x6>
 800074e:	bf00      	nop
 8000750:	20000184 	.word	0x20000184
 8000754:	40013800 	.word	0x40013800

08000758 <putch>:

void putch(char c)
{
 8000758:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800075a:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 800075e:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000762:	2201      	movs	r2, #1
 8000764:	f10d 0107 	add.w	r1, sp, #7
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <putch+0x1c>)
 800076a:	f000 fd64 	bl	8001236 <HAL_UART_Transmit>
}
 800076e:	b003      	add	sp, #12
 8000770:	f85d fb04 	ldr.w	pc, [sp], #4
 8000774:	20000184 	.word	0x20000184

08000778 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0xc>)
 800077a:	6818      	ldr	r0, [r3, #0]
 800077c:	1c42      	adds	r2, r0, #1
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	200001f4 	.word	0x200001f4

08000788 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000788:	6803      	ldr	r3, [r0, #0]
{
 800078a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800078e:	07d9      	lsls	r1, r3, #31
{
 8000790:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000792:	d411      	bmi.n	80007b8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	079a      	lsls	r2, r3, #30
 8000798:	f100 8086 	bmi.w	80008a8 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	071e      	lsls	r6, r3, #28
 80007a0:	f100 80f4 	bmi.w	800098c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007a4:	6823      	ldr	r3, [r4, #0]
 80007a6:	075d      	lsls	r5, r3, #29
 80007a8:	f100 8140 	bmi.w	8000a2c <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007ac:	69e2      	ldr	r2, [r4, #28]
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	f040 81cb 	bne.w	8000b4a <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80007b4:	2000      	movs	r0, #0
 80007b6:	e021      	b.n	80007fc <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007b8:	499a      	ldr	r1, [pc, #616]	; (8000a24 <HAL_RCC_OscConfig+0x29c>)
 80007ba:	684b      	ldr	r3, [r1, #4]
 80007bc:	f003 030c 	and.w	r3, r3, #12
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d007      	beq.n	80007d4 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007c4:	684b      	ldr	r3, [r1, #4]
 80007c6:	f003 030c 	and.w	r3, r3, #12
 80007ca:	2b08      	cmp	r3, #8
 80007cc:	d119      	bne.n	8000802 <HAL_RCC_OscConfig+0x7a>
 80007ce:	684b      	ldr	r3, [r1, #4]
 80007d0:	03db      	lsls	r3, r3, #15
 80007d2:	d516      	bpl.n	8000802 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007d8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007dc:	6809      	ldr	r1, [r1, #0]
 80007de:	fa93 f3a3 	rbit	r3, r3
 80007e2:	fab3 f383 	clz	r3, r3
 80007e6:	f003 031f 	and.w	r3, r3, #31
 80007ea:	2201      	movs	r2, #1
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	420b      	tst	r3, r1
 80007f2:	d0cf      	beq.n	8000794 <HAL_RCC_OscConfig+0xc>
 80007f4:	6863      	ldr	r3, [r4, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1cc      	bne.n	8000794 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80007fa:	2001      	movs	r0, #1
}
 80007fc:	b002      	add	sp, #8
 80007fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000802:	6862      	ldr	r2, [r4, #4]
 8000804:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000808:	d124      	bne.n	8000854 <HAL_RCC_OscConfig+0xcc>
 800080a:	680b      	ldr	r3, [r1, #0]
 800080c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000810:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000812:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000814:	68a0      	ldr	r0, [r4, #8]
 8000816:	f023 030f 	bic.w	r3, r3, #15
 800081a:	4303      	orrs	r3, r0
 800081c:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800081e:	b34a      	cbz	r2, 8000874 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8000820:	f7ff ffaa 	bl	8000778 <HAL_GetTick>
 8000824:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000828:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082a:	2701      	movs	r7, #1
 800082c:	fa96 f3a6 	rbit	r3, r6
 8000830:	680a      	ldr	r2, [r1, #0]
 8000832:	fa96 f3a6 	rbit	r3, r6
 8000836:	fab3 f383 	clz	r3, r3
 800083a:	f003 031f 	and.w	r3, r3, #31
 800083e:	fa07 f303 	lsl.w	r3, r7, r3
 8000842:	4213      	tst	r3, r2
 8000844:	d1a6      	bne.n	8000794 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000846:	f7ff ff97 	bl	8000778 <HAL_GetTick>
 800084a:	1b40      	subs	r0, r0, r5
 800084c:	2864      	cmp	r0, #100	; 0x64
 800084e:	d9ed      	bls.n	800082c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000850:	2003      	movs	r0, #3
 8000852:	e7d3      	b.n	80007fc <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000854:	680b      	ldr	r3, [r1, #0]
 8000856:	b932      	cbnz	r2, 8000866 <HAL_RCC_OscConfig+0xde>
 8000858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085c:	600b      	str	r3, [r1, #0]
 800085e:	680b      	ldr	r3, [r1, #0]
 8000860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000864:	e7d4      	b.n	8000810 <HAL_RCC_OscConfig+0x88>
 8000866:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800086a:	d1f5      	bne.n	8000858 <HAL_RCC_OscConfig+0xd0>
 800086c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000870:	600b      	str	r3, [r1, #0]
 8000872:	e7ca      	b.n	800080a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000874:	f7ff ff80 	bl	8000778 <HAL_GetTick>
 8000878:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800087c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087e:	2701      	movs	r7, #1
 8000880:	fa96 f3a6 	rbit	r3, r6
 8000884:	680a      	ldr	r2, [r1, #0]
 8000886:	fa96 f3a6 	rbit	r3, r6
 800088a:	fab3 f383 	clz	r3, r3
 800088e:	f003 031f 	and.w	r3, r3, #31
 8000892:	fa07 f303 	lsl.w	r3, r7, r3
 8000896:	4213      	tst	r3, r2
 8000898:	f43f af7c 	beq.w	8000794 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800089c:	f7ff ff6c 	bl	8000778 <HAL_GetTick>
 80008a0:	1b40      	subs	r0, r0, r5
 80008a2:	2864      	cmp	r0, #100	; 0x64
 80008a4:	d9ec      	bls.n	8000880 <HAL_RCC_OscConfig+0xf8>
 80008a6:	e7d3      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008a8:	495e      	ldr	r1, [pc, #376]	; (8000a24 <HAL_RCC_OscConfig+0x29c>)
 80008aa:	684b      	ldr	r3, [r1, #4]
 80008ac:	f013 0f0c 	tst.w	r3, #12
 80008b0:	d007      	beq.n	80008c2 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008b2:	684b      	ldr	r3, [r1, #4]
 80008b4:	f003 030c 	and.w	r3, r3, #12
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d121      	bne.n	8000900 <HAL_RCC_OscConfig+0x178>
 80008bc:	684b      	ldr	r3, [r1, #4]
 80008be:	03df      	lsls	r7, r3, #15
 80008c0:	d41e      	bmi.n	8000900 <HAL_RCC_OscConfig+0x178>
 80008c2:	2302      	movs	r3, #2
 80008c4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008c8:	6808      	ldr	r0, [r1, #0]
 80008ca:	fa93 f3a3 	rbit	r3, r3
 80008ce:	fab3 f383 	clz	r3, r3
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	2201      	movs	r2, #1
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	4203      	tst	r3, r0
 80008de:	d002      	beq.n	80008e6 <HAL_RCC_OscConfig+0x15e>
 80008e0:	6923      	ldr	r3, [r4, #16]
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d189      	bne.n	80007fa <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008e6:	6808      	ldr	r0, [r1, #0]
 80008e8:	23f8      	movs	r3, #248	; 0xf8
 80008ea:	fa93 f3a3 	rbit	r3, r3
 80008ee:	fab3 f283 	clz	r2, r3
 80008f2:	6963      	ldr	r3, [r4, #20]
 80008f4:	4093      	lsls	r3, r2
 80008f6:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80008fa:	4313      	orrs	r3, r2
 80008fc:	600b      	str	r3, [r1, #0]
 80008fe:	e74d      	b.n	800079c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000900:	6922      	ldr	r2, [r4, #16]
 8000902:	2501      	movs	r5, #1
 8000904:	b302      	cbz	r2, 8000948 <HAL_RCC_OscConfig+0x1c0>
 8000906:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800090a:	fab3 f383 	clz	r3, r3
 800090e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000912:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	2702      	movs	r7, #2
 800091a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800091c:	f7ff ff2c 	bl	8000778 <HAL_GetTick>
 8000920:	4606      	mov	r6, r0
 8000922:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000926:	680a      	ldr	r2, [r1, #0]
 8000928:	fa97 f3a7 	rbit	r3, r7
 800092c:	fab3 f383 	clz	r3, r3
 8000930:	f003 031f 	and.w	r3, r3, #31
 8000934:	fa05 f303 	lsl.w	r3, r5, r3
 8000938:	4213      	tst	r3, r2
 800093a:	d1d4      	bne.n	80008e6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800093c:	f7ff ff1c 	bl	8000778 <HAL_GetTick>
 8000940:	1b80      	subs	r0, r0, r6
 8000942:	2802      	cmp	r0, #2
 8000944:	d9ed      	bls.n	8000922 <HAL_RCC_OscConfig+0x19a>
 8000946:	e783      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
 8000948:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 800094c:	fab3 f383 	clz	r3, r3
 8000950:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000954:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	2702      	movs	r7, #2
 800095c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800095e:	f7ff ff0b 	bl	8000778 <HAL_GetTick>
 8000962:	4606      	mov	r6, r0
 8000964:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000968:	680a      	ldr	r2, [r1, #0]
 800096a:	fa97 f3a7 	rbit	r3, r7
 800096e:	fab3 f383 	clz	r3, r3
 8000972:	f003 031f 	and.w	r3, r3, #31
 8000976:	fa05 f303 	lsl.w	r3, r5, r3
 800097a:	4213      	tst	r3, r2
 800097c:	f43f af0e 	beq.w	800079c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000980:	f7ff fefa 	bl	8000778 <HAL_GetTick>
 8000984:	1b80      	subs	r0, r0, r6
 8000986:	2802      	cmp	r0, #2
 8000988:	d9ec      	bls.n	8000964 <HAL_RCC_OscConfig+0x1dc>
 800098a:	e761      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800098c:	69a2      	ldr	r2, [r4, #24]
 800098e:	4d25      	ldr	r5, [pc, #148]	; (8000a24 <HAL_RCC_OscConfig+0x29c>)
 8000990:	4825      	ldr	r0, [pc, #148]	; (8000a28 <HAL_RCC_OscConfig+0x2a0>)
 8000992:	2101      	movs	r1, #1
 8000994:	b312      	cbz	r2, 80009dc <HAL_RCC_OscConfig+0x254>
 8000996:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 800099a:	fab3 f383 	clz	r3, r3
 800099e:	4403      	add	r3, r0
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	2602      	movs	r6, #2
 80009a4:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 80009a6:	f7ff fee7 	bl	8000778 <HAL_GetTick>
 80009aa:	4607      	mov	r7, r0
 80009ac:	fa96 f3a6 	rbit	r3, r6
 80009b0:	fa96 f3a6 	rbit	r3, r6
 80009b4:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80009ba:	fa96 f3a6 	rbit	r3, r6
 80009be:	fab3 f383 	clz	r3, r3
 80009c2:	f003 031f 	and.w	r3, r3, #31
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	4213      	tst	r3, r2
 80009cc:	f47f aeea 	bne.w	80007a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d0:	f7ff fed2 	bl	8000778 <HAL_GetTick>
 80009d4:	1bc0      	subs	r0, r0, r7
 80009d6:	2802      	cmp	r0, #2
 80009d8:	d9e8      	bls.n	80009ac <HAL_RCC_OscConfig+0x224>
 80009da:	e739      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
 80009dc:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 80009e0:	fab3 f383 	clz	r3, r3
 80009e4:	4403      	add	r3, r0
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	2602      	movs	r6, #2
 80009ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ec:	f7ff fec4 	bl	8000778 <HAL_GetTick>
 80009f0:	4607      	mov	r7, r0
 80009f2:	fa96 f3a6 	rbit	r3, r6
 80009f6:	fa96 f3a6 	rbit	r3, r6
 80009fa:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a00:	fa96 f3a6 	rbit	r3, r6
 8000a04:	fab3 f383 	clz	r3, r3
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	4213      	tst	r3, r2
 8000a12:	f43f aec7 	beq.w	80007a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a16:	f7ff feaf 	bl	8000778 <HAL_GetTick>
 8000a1a:	1bc0      	subs	r0, r0, r7
 8000a1c:	2802      	cmp	r0, #2
 8000a1e:	d9e8      	bls.n	80009f2 <HAL_RCC_OscConfig+0x26a>
 8000a20:	e716      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000
 8000a28:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a2c:	498a      	ldr	r1, [pc, #552]	; (8000c58 <HAL_RCC_OscConfig+0x4d0>)
 8000a2e:	69cb      	ldr	r3, [r1, #28]
 8000a30:	00d8      	lsls	r0, r3, #3
 8000a32:	d433      	bmi.n	8000a9c <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	69cb      	ldr	r3, [r1, #28]
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	61cb      	str	r3, [r1, #28]
 8000a3c:	69cb      	ldr	r3, [r1, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a46:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a48:	4e84      	ldr	r6, [pc, #528]	; (8000c5c <HAL_RCC_OscConfig+0x4d4>)
 8000a4a:	6833      	ldr	r3, [r6, #0]
 8000a4c:	05da      	lsls	r2, r3, #23
 8000a4e:	d527      	bpl.n	8000aa0 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a50:	68e3      	ldr	r3, [r4, #12]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d134      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x338>
 8000a56:	6a0b      	ldr	r3, [r1, #32]
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000a5e:	f7ff fe8b 	bl	8000778 <HAL_GetTick>
 8000a62:	2602      	movs	r6, #2
 8000a64:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a66:	f04f 0801 	mov.w	r8, #1
 8000a6a:	fa96 f3a6 	rbit	r3, r6
 8000a6e:	fa96 f3a6 	rbit	r3, r6
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d061      	beq.n	8000b3a <HAL_RCC_OscConfig+0x3b2>
 8000a76:	6a0a      	ldr	r2, [r1, #32]
 8000a78:	fa96 f3a6 	rbit	r3, r6
 8000a7c:	fab3 f383 	clz	r3, r3
 8000a80:	f003 031f 	and.w	r3, r3, #31
 8000a84:	fa08 f303 	lsl.w	r3, r8, r3
 8000a88:	4213      	tst	r3, r2
 8000a8a:	d04e      	beq.n	8000b2a <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000a8c:	2d00      	cmp	r5, #0
 8000a8e:	f43f ae8d 	beq.w	80007ac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a92:	69cb      	ldr	r3, [r1, #28]
 8000a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a98:	61cb      	str	r3, [r1, #28]
 8000a9a:	e687      	b.n	80007ac <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000a9c:	2500      	movs	r5, #0
 8000a9e:	e7d3      	b.n	8000a48 <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aa0:	6833      	ldr	r3, [r6, #0]
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000aa8:	f7ff fe66 	bl	8000778 <HAL_GetTick>
 8000aac:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aae:	6833      	ldr	r3, [r6, #0]
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	d4cd      	bmi.n	8000a50 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ab4:	f7ff fe60 	bl	8000778 <HAL_GetTick>
 8000ab8:	1bc0      	subs	r0, r0, r7
 8000aba:	2864      	cmp	r0, #100	; 0x64
 8000abc:	d9f7      	bls.n	8000aae <HAL_RCC_OscConfig+0x326>
 8000abe:	e6c7      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac0:	bb2b      	cbnz	r3, 8000b0e <HAL_RCC_OscConfig+0x386>
 8000ac2:	6a0b      	ldr	r3, [r1, #32]
 8000ac4:	f023 0301 	bic.w	r3, r3, #1
 8000ac8:	620b      	str	r3, [r1, #32]
 8000aca:	6a0b      	ldr	r3, [r1, #32]
 8000acc:	f023 0304 	bic.w	r3, r3, #4
 8000ad0:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000ad2:	f7ff fe51 	bl	8000778 <HAL_GetTick>
 8000ad6:	2602      	movs	r6, #2
 8000ad8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ada:	f04f 0801 	mov.w	r8, #1
 8000ade:	fa96 f3a6 	rbit	r3, r6
 8000ae2:	fa96 f3a6 	rbit	r3, r6
 8000ae6:	b363      	cbz	r3, 8000b42 <HAL_RCC_OscConfig+0x3ba>
 8000ae8:	6a0a      	ldr	r2, [r1, #32]
 8000aea:	fa96 f3a6 	rbit	r3, r6
 8000aee:	fab3 f383 	clz	r3, r3
 8000af2:	f003 031f 	and.w	r3, r3, #31
 8000af6:	fa08 f303 	lsl.w	r3, r8, r3
 8000afa:	4213      	tst	r3, r2
 8000afc:	d0c6      	beq.n	8000a8c <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000afe:	f7ff fe3b 	bl	8000778 <HAL_GetTick>
 8000b02:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b06:	1bc0      	subs	r0, r0, r7
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	d9e8      	bls.n	8000ade <HAL_RCC_OscConfig+0x356>
 8000b0c:	e6a0      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0e:	2b05      	cmp	r3, #5
 8000b10:	6a0b      	ldr	r3, [r1, #32]
 8000b12:	d103      	bne.n	8000b1c <HAL_RCC_OscConfig+0x394>
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	620b      	str	r3, [r1, #32]
 8000b1a:	e79c      	b.n	8000a56 <HAL_RCC_OscConfig+0x2ce>
 8000b1c:	f023 0301 	bic.w	r3, r3, #1
 8000b20:	620b      	str	r3, [r1, #32]
 8000b22:	6a0b      	ldr	r3, [r1, #32]
 8000b24:	f023 0304 	bic.w	r3, r3, #4
 8000b28:	e798      	b.n	8000a5c <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2a:	f7ff fe25 	bl	8000778 <HAL_GetTick>
 8000b2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b32:	1bc0      	subs	r0, r0, r7
 8000b34:	4298      	cmp	r0, r3
 8000b36:	d998      	bls.n	8000a6a <HAL_RCC_OscConfig+0x2e2>
 8000b38:	e68a      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
 8000b3a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000b40:	e79a      	b.n	8000a78 <HAL_RCC_OscConfig+0x2f0>
 8000b42:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b46:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000b48:	e7cf      	b.n	8000aea <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b4a:	4943      	ldr	r1, [pc, #268]	; (8000c58 <HAL_RCC_OscConfig+0x4d0>)
 8000b4c:	684b      	ldr	r3, [r1, #4]
 8000b4e:	f003 030c 	and.w	r3, r3, #12
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	f43f ae51 	beq.w	80007fa <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b58:	2a02      	cmp	r2, #2
 8000b5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b5e:	d154      	bne.n	8000c0a <HAL_RCC_OscConfig+0x482>
 8000b60:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b64:	fab3 f383 	clz	r3, r3
 8000b68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b76:	f7ff fdff 	bl	8000778 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8000c60 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8000b7e:	4606      	mov	r6, r0
 8000b80:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b84:	2501      	movs	r5, #1
 8000b86:	fa97 f3a7 	rbit	r3, r7
 8000b8a:	680a      	ldr	r2, [r1, #0]
 8000b8c:	fa97 f3a7 	rbit	r3, r7
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	fa05 f303 	lsl.w	r3, r5, r3
 8000b9c:	4213      	tst	r3, r2
 8000b9e:	d12e      	bne.n	8000bfe <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ba0:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8000ba4:	684a      	ldr	r2, [r1, #4]
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
 8000bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bb4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000bb8:	fab3 f383 	clz	r3, r3
 8000bbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bc4:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc6:	4f26      	ldr	r7, [pc, #152]	; (8000c60 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8000bc8:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000bca:	f7ff fdd5 	bl	8000778 <HAL_GetTick>
 8000bce:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000bd2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd4:	2601      	movs	r6, #1
 8000bd6:	fa95 f3a5 	rbit	r3, r5
 8000bda:	680a      	ldr	r2, [r1, #0]
 8000bdc:	fa95 f3a5 	rbit	r3, r5
 8000be0:	fab3 f383 	clz	r3, r3
 8000be4:	f003 031f 	and.w	r3, r3, #31
 8000be8:	fa06 f303 	lsl.w	r3, r6, r3
 8000bec:	4213      	tst	r3, r2
 8000bee:	f47f ade1 	bne.w	80007b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf2:	f7ff fdc1 	bl	8000778 <HAL_GetTick>
 8000bf6:	1b00      	subs	r0, r0, r4
 8000bf8:	42b8      	cmp	r0, r7
 8000bfa:	d9ec      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x44e>
 8000bfc:	e628      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bfe:	f7ff fdbb 	bl	8000778 <HAL_GetTick>
 8000c02:	1b80      	subs	r0, r0, r6
 8000c04:	4540      	cmp	r0, r8
 8000c06:	d9be      	bls.n	8000b86 <HAL_RCC_OscConfig+0x3fe>
 8000c08:	e622      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
 8000c0a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000c0e:	fab3 f383 	clz	r3, r3
 8000c12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c20:	f7ff fdaa 	bl	8000778 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c24:	4f0e      	ldr	r7, [pc, #56]	; (8000c60 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8000c26:	4604      	mov	r4, r0
 8000c28:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fa95 f3a5 	rbit	r3, r5
 8000c32:	680a      	ldr	r2, [r1, #0]
 8000c34:	fa95 f3a5 	rbit	r3, r5
 8000c38:	fab3 f383 	clz	r3, r3
 8000c3c:	f003 031f 	and.w	r3, r3, #31
 8000c40:	fa06 f303 	lsl.w	r3, r6, r3
 8000c44:	4213      	tst	r3, r2
 8000c46:	f43f adb5 	beq.w	80007b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c4a:	f7ff fd95 	bl	8000778 <HAL_GetTick>
 8000c4e:	1b00      	subs	r0, r0, r4
 8000c50:	42b8      	cmp	r0, r7
 8000c52:	d9ec      	bls.n	8000c2e <HAL_RCC_OscConfig+0x4a6>
 8000c54:	e5fc      	b.n	8000850 <HAL_RCC_OscConfig+0xc8>
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40007000 	.word	0x40007000
 8000c60:	00030d40 	.word	0x00030d40

08000c64 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c64:	4a50      	ldr	r2, [pc, #320]	; (8000da8 <HAL_RCC_ClockConfig+0x144>)
{
 8000c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c68:	6813      	ldr	r3, [r2, #0]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	428b      	cmp	r3, r1
{
 8000c70:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c72:	d31b      	bcc.n	8000cac <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c74:	6822      	ldr	r2, [r4, #0]
 8000c76:	0790      	lsls	r0, r2, #30
 8000c78:	d424      	bmi.n	8000cc4 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c7a:	07d2      	lsls	r2, r2, #31
 8000c7c:	d42a      	bmi.n	8000cd4 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c7e:	4a4a      	ldr	r2, [pc, #296]	; (8000da8 <HAL_RCC_ClockConfig+0x144>)
 8000c80:	6813      	ldr	r3, [r2, #0]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d87a      	bhi.n	8000d80 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c8a:	6820      	ldr	r0, [r4, #0]
 8000c8c:	0743      	lsls	r3, r0, #29
 8000c8e:	f100 8082 	bmi.w	8000d96 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c92:	f010 0008 	ands.w	r0, r0, #8
 8000c96:	d014      	beq.n	8000cc2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c98:	4a44      	ldr	r2, [pc, #272]	; (8000dac <HAL_RCC_ClockConfig+0x148>)
 8000c9a:	6921      	ldr	r1, [r4, #16]
 8000c9c:	6853      	ldr	r3, [r2, #4]
 8000c9e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ca2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ca6:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000ca8:	2000      	movs	r0, #0
 8000caa:	e00a      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cac:	6813      	ldr	r3, [r2, #0]
 8000cae:	f023 0307 	bic.w	r3, r3, #7
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d0d9      	beq.n	8000c74 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8000cc0:	2001      	movs	r0, #1
}
 8000cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cc4:	4839      	ldr	r0, [pc, #228]	; (8000dac <HAL_RCC_ClockConfig+0x148>)
 8000cc6:	68a5      	ldr	r5, [r4, #8]
 8000cc8:	6843      	ldr	r3, [r0, #4]
 8000cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cce:	432b      	orrs	r3, r5
 8000cd0:	6043      	str	r3, [r0, #4]
 8000cd2:	e7d2      	b.n	8000c7a <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cd4:	6862      	ldr	r2, [r4, #4]
 8000cd6:	4d35      	ldr	r5, [pc, #212]	; (8000dac <HAL_RCC_ClockConfig+0x148>)
 8000cd8:	2a01      	cmp	r2, #1
 8000cda:	d127      	bne.n	8000d2c <HAL_RCC_ClockConfig+0xc8>
 8000cdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce0:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce4:	6828      	ldr	r0, [r5, #0]
 8000ce6:	fa93 f3a3 	rbit	r3, r3
 8000cea:	fab3 f383 	clz	r3, r3
 8000cee:	f003 031f 	and.w	r3, r3, #31
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	d0e2      	beq.n	8000cc0 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cfa:	686b      	ldr	r3, [r5, #4]
 8000cfc:	f023 0303 	bic.w	r3, r3, #3
 8000d00:	431a      	orrs	r2, r3
 8000d02:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 8000d04:	f7ff fd38 	bl	8000778 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d08:	6863      	ldr	r3, [r4, #4]
 8000d0a:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000d0c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d0e:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d12:	d11e      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d14:	686b      	ldr	r3, [r5, #4]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d0af      	beq.n	8000c7e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d1e:	f7ff fd2b 	bl	8000778 <HAL_GetTick>
 8000d22:	1b80      	subs	r0, r0, r6
 8000d24:	42b8      	cmp	r0, r7
 8000d26:	d9f5      	bls.n	8000d14 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000d28:	2003      	movs	r0, #3
 8000d2a:	e7ca      	b.n	8000cc2 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d2c:	2a02      	cmp	r2, #2
 8000d2e:	bf0c      	ite	eq
 8000d30:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000d34:	2302      	movne	r3, #2
 8000d36:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3a:	682e      	ldr	r6, [r5, #0]
 8000d3c:	fa93 f3a3 	rbit	r3, r3
 8000d40:	fab3 f383 	clz	r3, r3
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f303 	lsl.w	r3, r0, r3
 8000d4e:	4233      	tst	r3, r6
 8000d50:	e7d2      	b.n	8000cf8 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d10f      	bne.n	8000d76 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d56:	686b      	ldr	r3, [r5, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d08e      	beq.n	8000c7e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d60:	f7ff fd0a 	bl	8000778 <HAL_GetTick>
 8000d64:	1b80      	subs	r0, r0, r6
 8000d66:	42b8      	cmp	r0, r7
 8000d68:	d9f5      	bls.n	8000d56 <HAL_RCC_ClockConfig+0xf2>
 8000d6a:	e7dd      	b.n	8000d28 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d6c:	f7ff fd04 	bl	8000778 <HAL_GetTick>
 8000d70:	1b80      	subs	r0, r0, r6
 8000d72:	42b8      	cmp	r0, r7
 8000d74:	d8d8      	bhi.n	8000d28 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d76:	686b      	ldr	r3, [r5, #4]
 8000d78:	f013 0f0c 	tst.w	r3, #12
 8000d7c:	d1f6      	bne.n	8000d6c <HAL_RCC_ClockConfig+0x108>
 8000d7e:	e77e      	b.n	8000c7e <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d80:	6813      	ldr	r3, [r2, #0]
 8000d82:	f023 0307 	bic.w	r3, r3, #7
 8000d86:	430b      	orrs	r3, r1
 8000d88:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d8a:	6813      	ldr	r3, [r2, #0]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d195      	bne.n	8000cc0 <HAL_RCC_ClockConfig+0x5c>
 8000d94:	e779      	b.n	8000c8a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d96:	4905      	ldr	r1, [pc, #20]	; (8000dac <HAL_RCC_ClockConfig+0x148>)
 8000d98:	68e3      	ldr	r3, [r4, #12]
 8000d9a:	684a      	ldr	r2, [r1, #4]
 8000d9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000da0:	431a      	orrs	r2, r3
 8000da2:	604a      	str	r2, [r1, #4]
 8000da4:	e775      	b.n	8000c92 <HAL_RCC_ClockConfig+0x2e>
 8000da6:	bf00      	nop
 8000da8:	40022000 	.word	0x40022000
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8000f2c <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db8:	4c5d      	ldr	r4, [pc, #372]	; (8000f30 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 8000dba:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dbc:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000dc0:	680a      	ldr	r2, [r1, #0]
 8000dc2:	fa32 f503 	lsrs.w	r5, r2, r3
 8000dc6:	d102      	bne.n	8000dce <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000dc8:	b003      	add	sp, #12
 8000dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dce:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 8000dd2:	ea1a 0202 	ands.w	r2, sl, r2
 8000dd6:	f000 809e 	beq.w	8000f16 <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dda:	684d      	ldr	r5, [r1, #4]
 8000ddc:	f025 0e10 	bic.w	lr, r5, #16
 8000de0:	f1be 0f02 	cmp.w	lr, #2
 8000de4:	d114      	bne.n	8000e10 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000de6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000dea:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dee:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000df2:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000dfa:	270f      	movs	r7, #15
 8000dfc:	fa07 f70b 	lsl.w	r7, r7, fp
 8000e00:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e04:	690e      	ldr	r6, [r1, #16]
 8000e06:	fa06 f60b 	lsl.w	r6, r6, fp
 8000e0a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000e0c:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8000e10:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e18:	2603      	movs	r6, #3
 8000e1a:	fa06 f70c 	lsl.w	r7, r6, ip
 8000e1e:	ea2b 0b07 	bic.w	fp, fp, r7
 8000e22:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e24:	f005 0703 	and.w	r7, r5, #3
 8000e28:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2c:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e30:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e34:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8000e38:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e3a:	d811      	bhi.n	8000e60 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8000e3c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e3e:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	68cf      	ldr	r7, [r1, #12]
 8000e44:	fa07 f70c 	lsl.w	r7, r7, ip
 8000e48:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000e4c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e4e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e50:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e54:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000e58:	409f      	lsls	r7, r3
 8000e5a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000e5e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e60:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e62:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	688e      	ldr	r6, [r1, #8]
 8000e66:	fa06 f60c 	lsl.w	r6, r6, ip
 8000e6a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000e6c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e6e:	00ee      	lsls	r6, r5, #3
 8000e70:	d551      	bpl.n	8000f16 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e76:	f046 0601 	orr.w	r6, r6, #1
 8000e7a:	f8c8 6018 	str.w	r6, [r8, #24]
 8000e7e:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e82:	f023 0703 	bic.w	r7, r3, #3
 8000e86:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e8a:	f006 0601 	and.w	r6, r6, #1
 8000e8e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000e92:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e94:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e98:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000e9a:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e9c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ea0:	f04f 0c0f 	mov.w	ip, #15
 8000ea4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ea8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000eac:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eb0:	d033      	beq.n	8000f1a <HAL_GPIO_Init+0x16a>
 8000eb2:	4e20      	ldr	r6, [pc, #128]	; (8000f34 <HAL_GPIO_Init+0x184>)
 8000eb4:	42b0      	cmp	r0, r6
 8000eb6:	d032      	beq.n	8000f1e <HAL_GPIO_Init+0x16e>
 8000eb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ebc:	42b0      	cmp	r0, r6
 8000ebe:	d030      	beq.n	8000f22 <HAL_GPIO_Init+0x172>
 8000ec0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ec4:	42b0      	cmp	r0, r6
 8000ec6:	d02e      	beq.n	8000f26 <HAL_GPIO_Init+0x176>
 8000ec8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ecc:	42b0      	cmp	r0, r6
 8000ece:	bf0c      	ite	eq
 8000ed0:	2604      	moveq	r6, #4
 8000ed2:	2605      	movne	r6, #5
 8000ed4:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ed8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000edc:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000ede:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee2:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	bf0c      	ite	eq
 8000ee8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000eea:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8000eec:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000eee:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef0:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	bf0c      	ite	eq
 8000ef6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000ef8:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8000efa:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000efc:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efe:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f02:	bf0c      	ite	eq
 8000f04:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000f06:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8000f08:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000f0a:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0c:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	bf54      	ite	pl
 8000f10:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000f12:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8000f14:	60e6      	str	r6, [r4, #12]
    position++;
 8000f16:	3301      	adds	r3, #1
 8000f18:	e752      	b.n	8000dc0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	e7da      	b.n	8000ed4 <HAL_GPIO_Init+0x124>
 8000f1e:	2601      	movs	r6, #1
 8000f20:	e7d8      	b.n	8000ed4 <HAL_GPIO_Init+0x124>
 8000f22:	2602      	movs	r6, #2
 8000f24:	e7d6      	b.n	8000ed4 <HAL_GPIO_Init+0x124>
 8000f26:	2603      	movs	r6, #3
 8000f28:	e7d4      	b.n	8000ed4 <HAL_GPIO_Init+0x124>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010400 	.word	0x40010400
 8000f34:	48000400 	.word	0x48000400

08000f38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f38:	b10a      	cbz	r2, 8000f3e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3a:	6181      	str	r1, [r0, #24]
 8000f3c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000f40:	4770      	bx	lr
 8000f42:	0000      	movs	r0, r0

08000f44 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f44:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f46:	6881      	ldr	r1, [r0, #8]
 8000f48:	69c3      	ldr	r3, [r0, #28]
{
 8000f4a:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f4c:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f4e:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f50:	4329      	orrs	r1, r5
 8000f52:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f54:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f58:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f5a:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f5e:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f60:	4321      	orrs	r1, r4
 8000f62:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f64:	6851      	ldr	r1, [r2, #4]
 8000f66:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f68:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f6a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8000f6e:	4321      	orrs	r1, r4
 8000f70:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f72:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f74:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f76:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f7a:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f7c:	4321      	orrs	r1, r4
 8000f7e:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f80:	4962      	ldr	r1, [pc, #392]	; (800110c <UART_SetConfig+0x1c8>)
 8000f82:	428a      	cmp	r2, r1
 8000f84:	d116      	bne.n	8000fb4 <UART_SetConfig+0x70>
 8000f86:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8000f8a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000f8c:	f001 0103 	and.w	r1, r1, #3
 8000f90:	3901      	subs	r1, #1
 8000f92:	2902      	cmp	r1, #2
 8000f94:	f200 80b2 	bhi.w	80010fc <UART_SetConfig+0x1b8>
 8000f98:	4c5d      	ldr	r4, [pc, #372]	; (8001110 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f9e:	5c61      	ldrb	r1, [r4, r1]
 8000fa0:	d177      	bne.n	8001092 <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 8000fa2:	2908      	cmp	r1, #8
 8000fa4:	d872      	bhi.n	800108c <UART_SetConfig+0x148>
 8000fa6:	e8df f001 	tbb	[pc, r1]
 8000faa:	acac      	.short	0xacac
 8000fac:	71ac7124 	.word	0x71ac7124
 8000fb0:	7171      	.short	0x7171
 8000fb2:	a4          	.byte	0xa4
 8000fb3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000fb4:	4957      	ldr	r1, [pc, #348]	; (8001114 <UART_SetConfig+0x1d0>)
 8000fb6:	428a      	cmp	r2, r1
 8000fb8:	d12c      	bne.n	8001014 <UART_SetConfig+0xd0>
 8000fba:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8000fbe:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000fc0:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8000fc4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000fc8:	f000 8090 	beq.w	80010ec <UART_SetConfig+0x1a8>
 8000fcc:	d80b      	bhi.n	8000fe6 <UART_SetConfig+0xa2>
 8000fce:	2900      	cmp	r1, #0
 8000fd0:	f000 8094 	beq.w	80010fc <UART_SetConfig+0x1b8>
 8000fd4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000fd8:	f000 8090 	beq.w	80010fc <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fe0:	d054      	beq.n	800108c <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000fe2:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000fe4:	e015      	b.n	8001012 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000fe6:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8000fea:	d1f7      	bne.n	8000fdc <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff0:	d166      	bne.n	80010c0 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000ff2:	6841      	ldr	r1, [r0, #4]
 8000ff4:	084b      	lsrs	r3, r1, #1
 8000ff6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8000ffa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 8001002:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001004:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001006:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800100a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800100e:	430b      	orrs	r3, r1
 8001010:	60d3      	str	r3, [r2, #12]

}
 8001012:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001014:	4940      	ldr	r1, [pc, #256]	; (8001118 <UART_SetConfig+0x1d4>)
 8001016:	428a      	cmp	r2, r1
 8001018:	d110      	bne.n	800103c <UART_SetConfig+0xf8>
 800101a:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 800101e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001020:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8001024:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8001028:	d060      	beq.n	80010ec <UART_SetConfig+0x1a8>
 800102a:	d804      	bhi.n	8001036 <UART_SetConfig+0xf2>
 800102c:	2900      	cmp	r1, #0
 800102e:	d065      	beq.n	80010fc <UART_SetConfig+0x1b8>
 8001030:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8001034:	e7d0      	b.n	8000fd8 <UART_SetConfig+0x94>
 8001036:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800103a:	e7d6      	b.n	8000fea <UART_SetConfig+0xa6>
 800103c:	4937      	ldr	r1, [pc, #220]	; (800111c <UART_SetConfig+0x1d8>)
 800103e:	428a      	cmp	r2, r1
 8001040:	d110      	bne.n	8001064 <UART_SetConfig+0x120>
 8001042:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 8001046:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001048:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 800104c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001050:	d04c      	beq.n	80010ec <UART_SetConfig+0x1a8>
 8001052:	d804      	bhi.n	800105e <UART_SetConfig+0x11a>
 8001054:	2900      	cmp	r1, #0
 8001056:	d051      	beq.n	80010fc <UART_SetConfig+0x1b8>
 8001058:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800105c:	e7bc      	b.n	8000fd8 <UART_SetConfig+0x94>
 800105e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8001062:	e7c2      	b.n	8000fea <UART_SetConfig+0xa6>
 8001064:	492e      	ldr	r1, [pc, #184]	; (8001120 <UART_SetConfig+0x1dc>)
 8001066:	428a      	cmp	r2, r1
 8001068:	d1b8      	bne.n	8000fdc <UART_SetConfig+0x98>
 800106a:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 800106e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001070:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8001074:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001078:	d038      	beq.n	80010ec <UART_SetConfig+0x1a8>
 800107a:	d804      	bhi.n	8001086 <UART_SetConfig+0x142>
 800107c:	2900      	cmp	r1, #0
 800107e:	d03d      	beq.n	80010fc <UART_SetConfig+0x1b8>
 8001080:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001084:	e7a8      	b.n	8000fd8 <UART_SetConfig+0x94>
 8001086:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800108a:	e7ae      	b.n	8000fea <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 800108c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800108e:	2300      	movs	r3, #0
 8001090:	e7b9      	b.n	8001006 <UART_SetConfig+0xc2>
    switch (clocksource)
 8001092:	2908      	cmp	r1, #8
 8001094:	d8a5      	bhi.n	8000fe2 <UART_SetConfig+0x9e>
 8001096:	a301      	add	r3, pc, #4	; (adr r3, 800109c <UART_SetConfig+0x158>)
 8001098:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800109c:	080010d9 	.word	0x080010d9
 80010a0:	080010d9 	.word	0x080010d9
 80010a4:	080010c1 	.word	0x080010c1
 80010a8:	08000fe3 	.word	0x08000fe3
 80010ac:	080010d9 	.word	0x080010d9
 80010b0:	08000fe3 	.word	0x08000fe3
 80010b4:	08000fe3 	.word	0x08000fe3
 80010b8:	08000fe3 	.word	0x08000fe3
 80010bc:	080010e3 	.word	0x080010e3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80010c0:	6841      	ldr	r1, [r0, #4]
 80010c2:	084b      	lsrs	r3, r1, #1
 80010c4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80010c8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80010cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80010d4:	2000      	movs	r0, #0
        break;
 80010d6:	e79c      	b.n	8001012 <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010d8:	6841      	ldr	r1, [r0, #4]
 80010da:	084b      	lsrs	r3, r1, #1
 80010dc:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80010e0:	e7f4      	b.n	80010cc <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80010e2:	6841      	ldr	r1, [r0, #4]
 80010e4:	084b      	lsrs	r3, r1, #1
 80010e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010ea:	e7ef      	b.n	80010cc <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010f0:	d1f7      	bne.n	80010e2 <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010f2:	6841      	ldr	r1, [r0, #4]
 80010f4:	084b      	lsrs	r3, r1, #1
 80010f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80010fa:	e780      	b.n	8000ffe <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001100:	d1ea      	bne.n	80010d8 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001102:	6841      	ldr	r1, [r0, #4]
 8001104:	084b      	lsrs	r3, r1, #1
 8001106:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 800110a:	e778      	b.n	8000ffe <UART_SetConfig+0xba>
 800110c:	40013800 	.word	0x40013800
 8001110:	08002c30 	.word	0x08002c30
 8001114:	40004400 	.word	0x40004400
 8001118:	40004800 	.word	0x40004800
 800111c:	40004c00 	.word	0x40004c00
 8001120:	40005000 	.word	0x40005000

08001124 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	9f06      	ldr	r7, [sp, #24]
 8001128:	4604      	mov	r4, r0
 800112a:	4615      	mov	r5, r2
 800112c:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800112e:	6822      	ldr	r2, [r4, #0]
 8001130:	69d3      	ldr	r3, [r2, #28]
 8001132:	ea31 0303 	bics.w	r3, r1, r3
 8001136:	bf0c      	ite	eq
 8001138:	2301      	moveq	r3, #1
 800113a:	2300      	movne	r3, #0
 800113c:	42ab      	cmp	r3, r5
 800113e:	d001      	beq.n	8001144 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001140:	2000      	movs	r0, #0
 8001142:	e014      	b.n	800116e <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8001144:	1c7b      	adds	r3, r7, #1
 8001146:	d0f3      	beq.n	8001130 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001148:	b997      	cbnz	r7, 8001170 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001152:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800115c:	2320      	movs	r3, #32
 800115e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001162:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001166:	2300      	movs	r3, #0
 8001168:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800116c:	2003      	movs	r0, #3
}
 800116e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001170:	f7ff fb02 	bl	8000778 <HAL_GetTick>
 8001174:	1b80      	subs	r0, r0, r6
 8001176:	42b8      	cmp	r0, r7
 8001178:	d9d9      	bls.n	800112e <UART_WaitOnFlagUntilTimeout+0xa>
 800117a:	e7e6      	b.n	800114a <UART_WaitOnFlagUntilTimeout+0x26>

0800117c <UART_CheckIdleState>:
{
 800117c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800117e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001180:	2100      	movs	r1, #0
 8001182:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001184:	f7ff faf8 	bl	8000778 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800118e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001190:	d417      	bmi.n	80011c2 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	075b      	lsls	r3, r3, #29
 8001198:	d50a      	bpl.n	80011b0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800119a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	462b      	mov	r3, r5
 80011a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff ffbb 	bl	8001124 <UART_WaitOnFlagUntilTimeout>
 80011ae:	b9a0      	cbnz	r0, 80011da <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80011b0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80011b2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80011b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80011b8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80011bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80011c0:	e00c      	b.n	80011dc <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80011c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	460a      	mov	r2, r1
 80011ca:	4603      	mov	r3, r0
 80011cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff ffa7 	bl	8001124 <UART_WaitOnFlagUntilTimeout>
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d0db      	beq.n	8001192 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80011da:	2003      	movs	r0, #3
}
 80011dc:	b003      	add	sp, #12
 80011de:	bd30      	pop	{r4, r5, pc}

080011e0 <HAL_UART_Init>:
{
 80011e0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80011e2:	4604      	mov	r4, r0
 80011e4:	b328      	cbz	r0, 8001232 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 80011e6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80011ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011ee:	b90b      	cbnz	r3, 80011f4 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80011f0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 80011f4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011f6:	2324      	movs	r3, #36	; 0x24
 80011f8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80011fc:	6813      	ldr	r3, [r2, #0]
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff fe9d 	bl	8000f44 <UART_SetConfig>
 800120a:	2801      	cmp	r0, #1
 800120c:	d011      	beq.n	8001232 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800121e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8001226:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001228:	601a      	str	r2, [r3, #0]
}
 800122a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 800122e:	f7ff bfa5 	b.w	800117c <UART_CheckIdleState>
}
 8001232:	2001      	movs	r0, #1
 8001234:	bd10      	pop	{r4, pc}

08001236 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001238:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800123a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800123e:	2b20      	cmp	r3, #32
{
 8001240:	460d      	mov	r5, r1
 8001242:	4604      	mov	r4, r0
 8001244:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001246:	d14a      	bne.n	80012de <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8001248:	2d00      	cmp	r5, #0
 800124a:	d046      	beq.n	80012da <HAL_UART_Transmit+0xa4>
 800124c:	2a00      	cmp	r2, #0
 800124e:	d044      	beq.n	80012da <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001250:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001254:	2b01      	cmp	r3, #1
 8001256:	d042      	beq.n	80012de <HAL_UART_Transmit+0xa8>
 8001258:	2301      	movs	r3, #1
 800125a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001262:	2321      	movs	r3, #33	; 0x21
 8001264:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001268:	f7ff fa86 	bl	8000778 <HAL_GetTick>

    huart->TxXferSize = Size;
 800126c:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001270:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8001272:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001276:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800127a:	b292      	uxth	r2, r2
 800127c:	b962      	cbnz	r2, 8001298 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800127e:	9600      	str	r6, [sp, #0]
 8001280:	463b      	mov	r3, r7
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff ff4d 	bl	8001124 <UART_WaitOnFlagUntilTimeout>
 800128a:	b998      	cbnz	r0, 80012b4 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800128c:	2320      	movs	r3, #32
 800128e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001292:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8001296:	e00e      	b.n	80012b6 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8001298:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800129c:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 800129e:	3a01      	subs	r2, #1
 80012a0:	b292      	uxth	r2, r2
 80012a2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff ff39 	bl	8001124 <UART_WaitOnFlagUntilTimeout>
 80012b2:	b110      	cbz	r0, 80012ba <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80012b4:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80012b6:	b003      	add	sp, #12
 80012b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012ba:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80012bc:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c2:	d107      	bne.n	80012d4 <HAL_UART_Transmit+0x9e>
 80012c4:	6923      	ldr	r3, [r4, #16]
 80012c6:	b92b      	cbnz	r3, 80012d4 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80012c8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80012cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80012d0:	8513      	strh	r3, [r2, #40]	; 0x28
 80012d2:	e7d0      	b.n	8001276 <HAL_UART_Transmit+0x40>
 80012d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80012d8:	e7fa      	b.n	80012d0 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 80012da:	2001      	movs	r0, #1
 80012dc:	e7eb      	b.n	80012b6 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80012de:	2002      	movs	r0, #2
 80012e0:	e7e9      	b.n	80012b6 <HAL_UART_Transmit+0x80>

080012e2 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80012e6:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80012e8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80012ec:	2b20      	cmp	r3, #32
{
 80012ee:	460d      	mov	r5, r1
 80012f0:	4604      	mov	r4, r0
 80012f2:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80012f4:	d15c      	bne.n	80013b0 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 80012f6:	2d00      	cmp	r5, #0
 80012f8:	d058      	beq.n	80013ac <HAL_UART_Receive+0xca>
 80012fa:	2a00      	cmp	r2, #0
 80012fc:	d056      	beq.n	80013ac <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80012fe:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001302:	2b01      	cmp	r3, #1
 8001304:	d054      	beq.n	80013b0 <HAL_UART_Receive+0xce>
 8001306:	2301      	movs	r3, #1
 8001308:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 800130c:	6803      	ldr	r3, [r0, #0]
 800130e:	f04f 32ff 	mov.w	r2, #4294967295
 8001312:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001318:	2322      	movs	r3, #34	; 0x22
 800131a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800131e:	f7ff fa2b 	bl	8000778 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001322:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8001324:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800132c:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800132e:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001332:	d115      	bne.n	8001360 <HAL_UART_Receive+0x7e>
 8001334:	6923      	ldr	r3, [r4, #16]
 8001336:	b98b      	cbnz	r3, 800135c <HAL_UART_Receive+0x7a>
 8001338:	f240 13ff 	movw	r3, #511	; 0x1ff
 800133c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001340:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001344:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001348:	b280      	uxth	r0, r0
 800134a:	b980      	cbnz	r0, 800136e <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800134c:	2320      	movs	r3, #32
 800134e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001352:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001356:	b002      	add	sp, #8
 8001358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 800135c:	23ff      	movs	r3, #255	; 0xff
 800135e:	e7ed      	b.n	800133c <HAL_UART_Receive+0x5a>
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ed      	bne.n	8001340 <HAL_UART_Receive+0x5e>
 8001364:	6923      	ldr	r3, [r4, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f8      	beq.n	800135c <HAL_UART_Receive+0x7a>
 800136a:	237f      	movs	r3, #127	; 0x7f
 800136c:	e7e6      	b.n	800133c <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 800136e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001372:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 8001374:	3a01      	subs	r2, #1
 8001376:	b292      	uxth	r2, r2
 8001378:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800137c:	4643      	mov	r3, r8
 800137e:	2200      	movs	r2, #0
 8001380:	2120      	movs	r1, #32
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff fece 	bl	8001124 <UART_WaitOnFlagUntilTimeout>
 8001388:	b9a0      	cbnz	r0, 80013b4 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800138a:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800138c:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800138e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001392:	d106      	bne.n	80013a2 <HAL_UART_Receive+0xc0>
 8001394:	6922      	ldr	r2, [r4, #16]
 8001396:	b922      	cbnz	r2, 80013a2 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001398:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800139a:	403b      	ands	r3, r7
 800139c:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80013a0:	e7d0      	b.n	8001344 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80013a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013a4:	403b      	ands	r3, r7
 80013a6:	f805 3b01 	strb.w	r3, [r5], #1
 80013aa:	e7cb      	b.n	8001344 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
 80013ae:	e7d2      	b.n	8001356 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80013b0:	2002      	movs	r0, #2
 80013b2:	e7d0      	b.n	8001356 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80013b4:	2003      	movs	r0, #3
 80013b6:	e7ce      	b.n	8001356 <HAL_UART_Receive+0x74>

080013b8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <_sbrk+0x2c>)
 80013ba:	6811      	ldr	r1, [r2, #0]
{
 80013bc:	b508      	push	{r3, lr}
 80013be:	4603      	mov	r3, r0
	if (heap_end == 0)
 80013c0:	b909      	cbnz	r1, 80013c6 <_sbrk+0xe>
		heap_end = &end;
 80013c2:	4909      	ldr	r1, [pc, #36]	; (80013e8 <_sbrk+0x30>)
 80013c4:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80013c6:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80013c8:	4669      	mov	r1, sp
 80013ca:	4403      	add	r3, r0
 80013cc:	428b      	cmp	r3, r1
 80013ce:	d906      	bls.n	80013de <_sbrk+0x26>
	{
		errno = ENOMEM;
 80013d0:	f000 f832 	bl	8001438 <__errno>
 80013d4:	230c      	movs	r3, #12
 80013d6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80013dc:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80013de:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80013e0:	e7fc      	b.n	80013dc <_sbrk+0x24>
 80013e2:	bf00      	nop
 80013e4:	200001fc 	.word	0x200001fc
 80013e8:	20000210 	.word	0x20000210

080013ec <Reset_Handler>:
 80013ec:	2100      	movs	r1, #0
 80013ee:	e003      	b.n	80013f8 <LoopCopyDataInit>

080013f0 <CopyDataInit>:
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <LoopForever+0x2>)
 80013f2:	585b      	ldr	r3, [r3, r1]
 80013f4:	5043      	str	r3, [r0, r1]
 80013f6:	3104      	adds	r1, #4

080013f8 <LoopCopyDataInit>:
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <LoopForever+0x6>)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <LoopForever+0xa>)
 80013fc:	1842      	adds	r2, r0, r1
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3f6      	bcc.n	80013f0 <CopyDataInit>
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <LoopForever+0xe>)
 8001404:	e002      	b.n	800140c <LoopFillZerobss>

08001406 <FillZerobss>:
 8001406:	2300      	movs	r3, #0
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	3204      	adds	r2, #4

0800140c <LoopFillZerobss>:
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <LoopForever+0x12>)
 800140e:	429a      	cmp	r2, r3
 8001410:	d3f9      	bcc.n	8001406 <FillZerobss>
 8001412:	f3af 8000 	nop.w
 8001416:	f000 f99d 	bl	8001754 <__libc_init_array>
 800141a:	f7fe ff85 	bl	8000328 <main>

0800141e <LoopForever>:
 800141e:	e7fe      	b.n	800141e <LoopForever>
 8001420:	08002de0 	.word	0x08002de0
 8001424:	20000000 	.word	0x20000000
 8001428:	20000064 	.word	0x20000064
 800142c:	20000064 	.word	0x20000064
 8001430:	20000210 	.word	0x20000210

08001434 <BusFault_Handler>:
 8001434:	e7fe      	b.n	8001434 <BusFault_Handler>
 8001436:	0000      	movs	r0, r0

08001438 <__errno>:
 8001438:	4b01      	ldr	r3, [pc, #4]	; (8001440 <__errno+0x8>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000

08001444 <_fopen_r>:
 8001444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001446:	460f      	mov	r7, r1
 8001448:	4611      	mov	r1, r2
 800144a:	aa01      	add	r2, sp, #4
 800144c:	4605      	mov	r5, r0
 800144e:	f001 faa3 	bl	8002998 <__sflags>
 8001452:	4606      	mov	r6, r0
 8001454:	b918      	cbnz	r0, 800145e <_fopen_r+0x1a>
 8001456:	2400      	movs	r4, #0
 8001458:	4620      	mov	r0, r4
 800145a:	b003      	add	sp, #12
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	4628      	mov	r0, r5
 8001460:	f001 fa54 	bl	800290c <__sfp>
 8001464:	4604      	mov	r4, r0
 8001466:	2800      	cmp	r0, #0
 8001468:	d0f5      	beq.n	8001456 <_fopen_r+0x12>
 800146a:	4639      	mov	r1, r7
 800146c:	9a01      	ldr	r2, [sp, #4]
 800146e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8001472:	4628      	mov	r0, r5
 8001474:	f000 fdd2 	bl	800201c <_open_r>
 8001478:	1e07      	subs	r7, r0, #0
 800147a:	da09      	bge.n	8001490 <_fopen_r+0x4c>
 800147c:	2500      	movs	r5, #0
 800147e:	f001 f9f5 	bl	800286c <__sfp_lock_acquire>
 8001482:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001484:	81a5      	strh	r5, [r4, #12]
 8001486:	f000 f98a 	bl	800179e <__retarget_lock_close_recursive>
 800148a:	f001 f9f5 	bl	8002878 <__sfp_lock_release>
 800148e:	e7e2      	b.n	8001456 <_fopen_r+0x12>
 8001490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001492:	07db      	lsls	r3, r3, #31
 8001494:	d405      	bmi.n	80014a2 <_fopen_r+0x5e>
 8001496:	89a3      	ldrh	r3, [r4, #12]
 8001498:	0598      	lsls	r0, r3, #22
 800149a:	d402      	bmi.n	80014a2 <_fopen_r+0x5e>
 800149c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800149e:	f000 f97f 	bl	80017a0 <__retarget_lock_acquire_recursive>
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <_fopen_r+0x98>)
 80014a4:	6263      	str	r3, [r4, #36]	; 0x24
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <_fopen_r+0x9c>)
 80014a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <_fopen_r+0xa0>)
 80014ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014ae:	05f1      	lsls	r1, r6, #23
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <_fopen_r+0xa4>)
 80014b2:	81e7      	strh	r7, [r4, #14]
 80014b4:	81a6      	strh	r6, [r4, #12]
 80014b6:	6224      	str	r4, [r4, #32]
 80014b8:	6323      	str	r3, [r4, #48]	; 0x30
 80014ba:	d505      	bpl.n	80014c8 <_fopen_r+0x84>
 80014bc:	2302      	movs	r3, #2
 80014be:	2200      	movs	r2, #0
 80014c0:	4621      	mov	r1, r4
 80014c2:	4628      	mov	r0, r5
 80014c4:	f000 f82c 	bl	8001520 <_fseek_r>
 80014c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014ca:	07da      	lsls	r2, r3, #31
 80014cc:	d4c4      	bmi.n	8001458 <_fopen_r+0x14>
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	059b      	lsls	r3, r3, #22
 80014d2:	d4c1      	bmi.n	8001458 <_fopen_r+0x14>
 80014d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014d6:	f000 f964 	bl	80017a2 <__retarget_lock_release_recursive>
 80014da:	e7bd      	b.n	8001458 <_fopen_r+0x14>
 80014dc:	080021f9 	.word	0x080021f9
 80014e0:	0800221b 	.word	0x0800221b
 80014e4:	08002253 	.word	0x08002253
 80014e8:	08002277 	.word	0x08002277

080014ec <fopen>:
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <fopen+0xc>)
 80014ee:	460a      	mov	r2, r1
 80014f0:	4601      	mov	r1, r0
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	f7ff bfa6 	b.w	8001444 <_fopen_r>
 80014f8:	20000000 	.word	0x20000000

080014fc <fiscanf>:
 80014fc:	b40e      	push	{r1, r2, r3}
 80014fe:	b503      	push	{r0, r1, lr}
 8001500:	4601      	mov	r1, r0
 8001502:	ab03      	add	r3, sp, #12
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <fiscanf+0x20>)
 8001506:	f853 2b04 	ldr.w	r2, [r3], #4
 800150a:	6800      	ldr	r0, [r0, #0]
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f000 fc0f 	bl	8001d30 <_vfiscanf_r>
 8001512:	b002      	add	sp, #8
 8001514:	f85d eb04 	ldr.w	lr, [sp], #4
 8001518:	b003      	add	sp, #12
 800151a:	4770      	bx	lr
 800151c:	20000000 	.word	0x20000000

08001520 <_fseek_r>:
 8001520:	f000 b80a 	b.w	8001538 <_fseeko_r>

08001524 <fseek>:
 8001524:	4613      	mov	r3, r2
 8001526:	460a      	mov	r2, r1
 8001528:	4601      	mov	r1, r0
 800152a:	4802      	ldr	r0, [pc, #8]	; (8001534 <fseek+0x10>)
 800152c:	6800      	ldr	r0, [r0, #0]
 800152e:	f000 b803 	b.w	8001538 <_fseeko_r>
 8001532:	bf00      	nop
 8001534:	20000000 	.word	0x20000000

08001538 <_fseeko_r>:
 8001538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800153c:	460c      	mov	r4, r1
 800153e:	4617      	mov	r7, r2
 8001540:	461e      	mov	r6, r3
 8001542:	4605      	mov	r5, r0
 8001544:	b118      	cbz	r0, 800154e <_fseeko_r+0x16>
 8001546:	6983      	ldr	r3, [r0, #24]
 8001548:	b90b      	cbnz	r3, 800154e <_fseeko_r+0x16>
 800154a:	f001 f9a7 	bl	800289c <__sinit>
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <_fseeko_r+0x128>)
 8001550:	429c      	cmp	r4, r3
 8001552:	d122      	bne.n	800159a <_fseeko_r+0x62>
 8001554:	686c      	ldr	r4, [r5, #4]
 8001556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001558:	07d9      	lsls	r1, r3, #31
 800155a:	d405      	bmi.n	8001568 <_fseeko_r+0x30>
 800155c:	89a3      	ldrh	r3, [r4, #12]
 800155e:	059a      	lsls	r2, r3, #22
 8001560:	d402      	bmi.n	8001568 <_fseeko_r+0x30>
 8001562:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001564:	f000 f91c 	bl	80017a0 <__retarget_lock_acquire_recursive>
 8001568:	89a3      	ldrh	r3, [r4, #12]
 800156a:	f403 7384 	and.w	r3, r3, #264	; 0x108
 800156e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8001572:	d103      	bne.n	800157c <_fseeko_r+0x44>
 8001574:	4621      	mov	r1, r4
 8001576:	4628      	mov	r0, r5
 8001578:	f001 f8ea 	bl	8002750 <_fflush_r>
 800157c:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8001580:	f1b8 0f00 	cmp.w	r8, #0
 8001584:	d113      	bne.n	80015ae <_fseeko_r+0x76>
 8001586:	231d      	movs	r3, #29
 8001588:	602b      	str	r3, [r5, #0]
 800158a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800158c:	07d9      	lsls	r1, r3, #31
 800158e:	d55d      	bpl.n	800164c <_fseeko_r+0x114>
 8001590:	f04f 36ff 	mov.w	r6, #4294967295
 8001594:	4630      	mov	r0, r6
 8001596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800159a:	4b32      	ldr	r3, [pc, #200]	; (8001664 <_fseeko_r+0x12c>)
 800159c:	429c      	cmp	r4, r3
 800159e:	d101      	bne.n	80015a4 <_fseeko_r+0x6c>
 80015a0:	68ac      	ldr	r4, [r5, #8]
 80015a2:	e7d8      	b.n	8001556 <_fseeko_r+0x1e>
 80015a4:	4b30      	ldr	r3, [pc, #192]	; (8001668 <_fseeko_r+0x130>)
 80015a6:	429c      	cmp	r4, r3
 80015a8:	bf08      	it	eq
 80015aa:	68ec      	ldreq	r4, [r5, #12]
 80015ac:	e7d3      	b.n	8001556 <_fseeko_r+0x1e>
 80015ae:	2e01      	cmp	r6, #1
 80015b0:	d036      	beq.n	8001620 <_fseeko_r+0xe8>
 80015b2:	f036 0302 	bics.w	r3, r6, #2
 80015b6:	d147      	bne.n	8001648 <_fseeko_r+0x110>
 80015b8:	6923      	ldr	r3, [r4, #16]
 80015ba:	b91b      	cbnz	r3, 80015c4 <_fseeko_r+0x8c>
 80015bc:	4621      	mov	r1, r4
 80015be:	4628      	mov	r0, r5
 80015c0:	f000 f916 	bl	80017f0 <__smakebuf_r>
 80015c4:	4621      	mov	r1, r4
 80015c6:	4628      	mov	r0, r5
 80015c8:	f001 f8c2 	bl	8002750 <_fflush_r>
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d1dc      	bne.n	800158a <_fseeko_r+0x52>
 80015d0:	6a21      	ldr	r1, [r4, #32]
 80015d2:	4633      	mov	r3, r6
 80015d4:	463a      	mov	r2, r7
 80015d6:	4628      	mov	r0, r5
 80015d8:	47c0      	blx	r8
 80015da:	3001      	adds	r0, #1
 80015dc:	d0d5      	beq.n	800158a <_fseeko_r+0x52>
 80015de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015e0:	b141      	cbz	r1, 80015f4 <_fseeko_r+0xbc>
 80015e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015e6:	4299      	cmp	r1, r3
 80015e8:	d002      	beq.n	80015f0 <_fseeko_r+0xb8>
 80015ea:	4628      	mov	r0, r5
 80015ec:	f000 f958 	bl	80018a0 <_free_r>
 80015f0:	2300      	movs	r3, #0
 80015f2:	6363      	str	r3, [r4, #52]	; 0x34
 80015f4:	6923      	ldr	r3, [r4, #16]
 80015f6:	6023      	str	r3, [r4, #0]
 80015f8:	89a3      	ldrh	r3, [r4, #12]
 80015fa:	2500      	movs	r5, #0
 80015fc:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8001600:	6065      	str	r5, [r4, #4]
 8001602:	81a3      	strh	r3, [r4, #12]
 8001604:	2208      	movs	r2, #8
 8001606:	4629      	mov	r1, r5
 8001608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800160c:	f000 f940 	bl	8001890 <memset>
 8001610:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8001612:	f016 0601 	ands.w	r6, r6, #1
 8001616:	d120      	bne.n	800165a <_fseeko_r+0x122>
 8001618:	89a3      	ldrh	r3, [r4, #12]
 800161a:	059b      	lsls	r3, r3, #22
 800161c:	d4ba      	bmi.n	8001594 <_fseeko_r+0x5c>
 800161e:	e00c      	b.n	800163a <_fseeko_r+0x102>
 8001620:	4621      	mov	r1, r4
 8001622:	4628      	mov	r0, r5
 8001624:	f000 f822 	bl	800166c <_ftello_r>
 8001628:	1c43      	adds	r3, r0, #1
 800162a:	4606      	mov	r6, r0
 800162c:	d109      	bne.n	8001642 <_fseeko_r+0x10a>
 800162e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001630:	07dd      	lsls	r5, r3, #31
 8001632:	d4ad      	bmi.n	8001590 <_fseeko_r+0x58>
 8001634:	89a3      	ldrh	r3, [r4, #12]
 8001636:	0598      	lsls	r0, r3, #22
 8001638:	d4aa      	bmi.n	8001590 <_fseeko_r+0x58>
 800163a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800163c:	f000 f8b1 	bl	80017a2 <__retarget_lock_release_recursive>
 8001640:	e7a8      	b.n	8001594 <_fseeko_r+0x5c>
 8001642:	4407      	add	r7, r0
 8001644:	2600      	movs	r6, #0
 8001646:	e7b7      	b.n	80015b8 <_fseeko_r+0x80>
 8001648:	2316      	movs	r3, #22
 800164a:	e79d      	b.n	8001588 <_fseeko_r+0x50>
 800164c:	89a3      	ldrh	r3, [r4, #12]
 800164e:	059a      	lsls	r2, r3, #22
 8001650:	d49e      	bmi.n	8001590 <_fseeko_r+0x58>
 8001652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001654:	f000 f8a5 	bl	80017a2 <__retarget_lock_release_recursive>
 8001658:	e79a      	b.n	8001590 <_fseeko_r+0x58>
 800165a:	462e      	mov	r6, r5
 800165c:	e79a      	b.n	8001594 <_fseeko_r+0x5c>
 800165e:	bf00      	nop
 8001660:	08002d98 	.word	0x08002d98
 8001664:	08002db8 	.word	0x08002db8
 8001668:	08002d78 	.word	0x08002d78

0800166c <_ftello_r>:
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	460c      	mov	r4, r1
 8001670:	4605      	mov	r5, r0
 8001672:	b118      	cbz	r0, 800167c <_ftello_r+0x10>
 8001674:	6983      	ldr	r3, [r0, #24]
 8001676:	b90b      	cbnz	r3, 800167c <_ftello_r+0x10>
 8001678:	f001 f910 	bl	800289c <__sinit>
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <_ftello_r+0xdc>)
 800167e:	429c      	cmp	r4, r3
 8001680:	d114      	bne.n	80016ac <_ftello_r+0x40>
 8001682:	686c      	ldr	r4, [r5, #4]
 8001684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001686:	07da      	lsls	r2, r3, #31
 8001688:	d405      	bmi.n	8001696 <_ftello_r+0x2a>
 800168a:	89a3      	ldrh	r3, [r4, #12]
 800168c:	059b      	lsls	r3, r3, #22
 800168e:	d402      	bmi.n	8001696 <_ftello_r+0x2a>
 8001690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001692:	f000 f885 	bl	80017a0 <__retarget_lock_acquire_recursive>
 8001696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001698:	b9ce      	cbnz	r6, 80016ce <_ftello_r+0x62>
 800169a:	231d      	movs	r3, #29
 800169c:	602b      	str	r3, [r5, #0]
 800169e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016a0:	07de      	lsls	r6, r3, #31
 80016a2:	d50d      	bpl.n	80016c0 <_ftello_r+0x54>
 80016a4:	f04f 35ff 	mov.w	r5, #4294967295
 80016a8:	4628      	mov	r0, r5
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <_ftello_r+0xe0>)
 80016ae:	429c      	cmp	r4, r3
 80016b0:	d101      	bne.n	80016b6 <_ftello_r+0x4a>
 80016b2:	68ac      	ldr	r4, [r5, #8]
 80016b4:	e7e6      	b.n	8001684 <_ftello_r+0x18>
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <_ftello_r+0xe4>)
 80016b8:	429c      	cmp	r4, r3
 80016ba:	bf08      	it	eq
 80016bc:	68ec      	ldreq	r4, [r5, #12]
 80016be:	e7e1      	b.n	8001684 <_ftello_r+0x18>
 80016c0:	89a3      	ldrh	r3, [r4, #12]
 80016c2:	059d      	lsls	r5, r3, #22
 80016c4:	d4ee      	bmi.n	80016a4 <_ftello_r+0x38>
 80016c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016c8:	f000 f86b 	bl	80017a2 <__retarget_lock_release_recursive>
 80016cc:	e7ea      	b.n	80016a4 <_ftello_r+0x38>
 80016ce:	89a2      	ldrh	r2, [r4, #12]
 80016d0:	f002 030c 	and.w	r3, r2, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d119      	bne.n	800170c <_ftello_r+0xa0>
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	b1bb      	cbz	r3, 800170c <_ftello_r+0xa0>
 80016dc:	6921      	ldr	r1, [r4, #16]
 80016de:	1a5b      	subs	r3, r3, r1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	dd13      	ble.n	800170c <_ftello_r+0xa0>
 80016e4:	05d0      	lsls	r0, r2, #23
 80016e6:	d511      	bpl.n	800170c <_ftello_r+0xa0>
 80016e8:	2302      	movs	r3, #2
 80016ea:	2200      	movs	r2, #0
 80016ec:	6a21      	ldr	r1, [r4, #32]
 80016ee:	4628      	mov	r0, r5
 80016f0:	47b0      	blx	r6
 80016f2:	1c41      	adds	r1, r0, #1
 80016f4:	4605      	mov	r5, r0
 80016f6:	d10d      	bne.n	8001714 <_ftello_r+0xa8>
 80016f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016fa:	07da      	lsls	r2, r3, #31
 80016fc:	d4d2      	bmi.n	80016a4 <_ftello_r+0x38>
 80016fe:	89a3      	ldrh	r3, [r4, #12]
 8001700:	059b      	lsls	r3, r3, #22
 8001702:	d4cf      	bmi.n	80016a4 <_ftello_r+0x38>
 8001704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001706:	f000 f84c 	bl	80017a2 <__retarget_lock_release_recursive>
 800170a:	e7cd      	b.n	80016a8 <_ftello_r+0x3c>
 800170c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001710:	d00f      	beq.n	8001732 <_ftello_r+0xc6>
 8001712:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001714:	89a2      	ldrh	r2, [r4, #12]
 8001716:	0756      	lsls	r6, r2, #29
 8001718:	d50d      	bpl.n	8001736 <_ftello_r+0xca>
 800171a:	6863      	ldr	r3, [r4, #4]
 800171c:	1aed      	subs	r5, r5, r3
 800171e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001720:	b10b      	cbz	r3, 8001726 <_ftello_r+0xba>
 8001722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001724:	1aed      	subs	r5, r5, r3
 8001726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001728:	07d9      	lsls	r1, r3, #31
 800172a:	d4bd      	bmi.n	80016a8 <_ftello_r+0x3c>
 800172c:	0593      	lsls	r3, r2, #22
 800172e:	d4bb      	bmi.n	80016a8 <_ftello_r+0x3c>
 8001730:	e7e8      	b.n	8001704 <_ftello_r+0x98>
 8001732:	2301      	movs	r3, #1
 8001734:	e7da      	b.n	80016ec <_ftello_r+0x80>
 8001736:	0710      	lsls	r0, r2, #28
 8001738:	d5f5      	bpl.n	8001726 <_ftello_r+0xba>
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f2      	beq.n	8001726 <_ftello_r+0xba>
 8001740:	6921      	ldr	r1, [r4, #16]
 8001742:	1a5b      	subs	r3, r3, r1
 8001744:	441d      	add	r5, r3
 8001746:	e7ee      	b.n	8001726 <_ftello_r+0xba>
 8001748:	08002d98 	.word	0x08002d98
 800174c:	08002db8 	.word	0x08002db8
 8001750:	08002d78 	.word	0x08002d78

08001754 <__libc_init_array>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	4d0d      	ldr	r5, [pc, #52]	; (800178c <__libc_init_array+0x38>)
 8001758:	4c0d      	ldr	r4, [pc, #52]	; (8001790 <__libc_init_array+0x3c>)
 800175a:	1b64      	subs	r4, r4, r5
 800175c:	10a4      	asrs	r4, r4, #2
 800175e:	2600      	movs	r6, #0
 8001760:	42a6      	cmp	r6, r4
 8001762:	d109      	bne.n	8001778 <__libc_init_array+0x24>
 8001764:	4d0b      	ldr	r5, [pc, #44]	; (8001794 <__libc_init_array+0x40>)
 8001766:	4c0c      	ldr	r4, [pc, #48]	; (8001798 <__libc_init_array+0x44>)
 8001768:	f001 fa4e 	bl	8002c08 <_init>
 800176c:	1b64      	subs	r4, r4, r5
 800176e:	10a4      	asrs	r4, r4, #2
 8001770:	2600      	movs	r6, #0
 8001772:	42a6      	cmp	r6, r4
 8001774:	d105      	bne.n	8001782 <__libc_init_array+0x2e>
 8001776:	bd70      	pop	{r4, r5, r6, pc}
 8001778:	f855 3b04 	ldr.w	r3, [r5], #4
 800177c:	4798      	blx	r3
 800177e:	3601      	adds	r6, #1
 8001780:	e7ee      	b.n	8001760 <__libc_init_array+0xc>
 8001782:	f855 3b04 	ldr.w	r3, [r5], #4
 8001786:	4798      	blx	r3
 8001788:	3601      	adds	r6, #1
 800178a:	e7f2      	b.n	8001772 <__libc_init_array+0x1e>
 800178c:	08002dd8 	.word	0x08002dd8
 8001790:	08002dd8 	.word	0x08002dd8
 8001794:	08002dd8 	.word	0x08002dd8
 8001798:	08002ddc 	.word	0x08002ddc

0800179c <__retarget_lock_init_recursive>:
 800179c:	4770      	bx	lr

0800179e <__retarget_lock_close_recursive>:
 800179e:	4770      	bx	lr

080017a0 <__retarget_lock_acquire_recursive>:
 80017a0:	4770      	bx	lr

080017a2 <__retarget_lock_release_recursive>:
 80017a2:	4770      	bx	lr

080017a4 <__swhatbuf_r>:
 80017a4:	b570      	push	{r4, r5, r6, lr}
 80017a6:	460e      	mov	r6, r1
 80017a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017ac:	2900      	cmp	r1, #0
 80017ae:	b096      	sub	sp, #88	; 0x58
 80017b0:	4614      	mov	r4, r2
 80017b2:	461d      	mov	r5, r3
 80017b4:	da08      	bge.n	80017c8 <__swhatbuf_r+0x24>
 80017b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	602a      	str	r2, [r5, #0]
 80017be:	061a      	lsls	r2, r3, #24
 80017c0:	d410      	bmi.n	80017e4 <__swhatbuf_r+0x40>
 80017c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c6:	e00e      	b.n	80017e6 <__swhatbuf_r+0x42>
 80017c8:	466a      	mov	r2, sp
 80017ca:	f001 f91b 	bl	8002a04 <_fstat_r>
 80017ce:	2800      	cmp	r0, #0
 80017d0:	dbf1      	blt.n	80017b6 <__swhatbuf_r+0x12>
 80017d2:	9a01      	ldr	r2, [sp, #4]
 80017d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80017d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80017dc:	425a      	negs	r2, r3
 80017de:	415a      	adcs	r2, r3
 80017e0:	602a      	str	r2, [r5, #0]
 80017e2:	e7ee      	b.n	80017c2 <__swhatbuf_r+0x1e>
 80017e4:	2340      	movs	r3, #64	; 0x40
 80017e6:	2000      	movs	r0, #0
 80017e8:	6023      	str	r3, [r4, #0]
 80017ea:	b016      	add	sp, #88	; 0x58
 80017ec:	bd70      	pop	{r4, r5, r6, pc}
 80017ee:	0000      	movs	r0, r0

080017f0 <__smakebuf_r>:
 80017f0:	898b      	ldrh	r3, [r1, #12]
 80017f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017f4:	079d      	lsls	r5, r3, #30
 80017f6:	4606      	mov	r6, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	d507      	bpl.n	800180c <__smakebuf_r+0x1c>
 80017fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001800:	6023      	str	r3, [r4, #0]
 8001802:	6123      	str	r3, [r4, #16]
 8001804:	2301      	movs	r3, #1
 8001806:	6163      	str	r3, [r4, #20]
 8001808:	b002      	add	sp, #8
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	ab01      	add	r3, sp, #4
 800180e:	466a      	mov	r2, sp
 8001810:	f7ff ffc8 	bl	80017a4 <__swhatbuf_r>
 8001814:	9900      	ldr	r1, [sp, #0]
 8001816:	4605      	mov	r5, r0
 8001818:	4630      	mov	r0, r6
 800181a:	f000 f88b 	bl	8001934 <_malloc_r>
 800181e:	b948      	cbnz	r0, 8001834 <__smakebuf_r+0x44>
 8001820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001824:	059a      	lsls	r2, r3, #22
 8001826:	d4ef      	bmi.n	8001808 <__smakebuf_r+0x18>
 8001828:	f023 0303 	bic.w	r3, r3, #3
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	81a3      	strh	r3, [r4, #12]
 8001832:	e7e3      	b.n	80017fc <__smakebuf_r+0xc>
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <__smakebuf_r+0x7c>)
 8001836:	62b3      	str	r3, [r6, #40]	; 0x28
 8001838:	89a3      	ldrh	r3, [r4, #12]
 800183a:	6020      	str	r0, [r4, #0]
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	81a3      	strh	r3, [r4, #12]
 8001842:	9b00      	ldr	r3, [sp, #0]
 8001844:	6163      	str	r3, [r4, #20]
 8001846:	9b01      	ldr	r3, [sp, #4]
 8001848:	6120      	str	r0, [r4, #16]
 800184a:	b15b      	cbz	r3, 8001864 <__smakebuf_r+0x74>
 800184c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001850:	4630      	mov	r0, r6
 8001852:	f001 f925 	bl	8002aa0 <_isatty_r>
 8001856:	b128      	cbz	r0, 8001864 <__smakebuf_r+0x74>
 8001858:	89a3      	ldrh	r3, [r4, #12]
 800185a:	f023 0303 	bic.w	r3, r3, #3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	81a3      	strh	r3, [r4, #12]
 8001864:	89a0      	ldrh	r0, [r4, #12]
 8001866:	4305      	orrs	r5, r0
 8001868:	81a5      	strh	r5, [r4, #12]
 800186a:	e7cd      	b.n	8001808 <__smakebuf_r+0x18>
 800186c:	08002835 	.word	0x08002835

08001870 <malloc>:
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <malloc+0xc>)
 8001872:	4601      	mov	r1, r0
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	f000 b85d 	b.w	8001934 <_malloc_r>
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000

08001880 <free>:
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <free+0xc>)
 8001882:	4601      	mov	r1, r0
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	f000 b80b 	b.w	80018a0 <_free_r>
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000

08001890 <memset>:
 8001890:	4402      	add	r2, r0
 8001892:	4603      	mov	r3, r0
 8001894:	4293      	cmp	r3, r2
 8001896:	d100      	bne.n	800189a <memset+0xa>
 8001898:	4770      	bx	lr
 800189a:	f803 1b01 	strb.w	r1, [r3], #1
 800189e:	e7f9      	b.n	8001894 <memset+0x4>

080018a0 <_free_r>:
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	4605      	mov	r5, r0
 80018a4:	2900      	cmp	r1, #0
 80018a6:	d041      	beq.n	800192c <_free_r+0x8c>
 80018a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018ac:	1f0c      	subs	r4, r1, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bfb8      	it	lt
 80018b2:	18e4      	addlt	r4, r4, r3
 80018b4:	f001 f924 	bl	8002b00 <__malloc_lock>
 80018b8:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <_free_r+0x90>)
 80018ba:	6813      	ldr	r3, [r2, #0]
 80018bc:	b933      	cbnz	r3, 80018cc <_free_r+0x2c>
 80018be:	6063      	str	r3, [r4, #4]
 80018c0:	6014      	str	r4, [r2, #0]
 80018c2:	4628      	mov	r0, r5
 80018c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018c8:	f001 b920 	b.w	8002b0c <__malloc_unlock>
 80018cc:	42a3      	cmp	r3, r4
 80018ce:	d908      	bls.n	80018e2 <_free_r+0x42>
 80018d0:	6820      	ldr	r0, [r4, #0]
 80018d2:	1821      	adds	r1, r4, r0
 80018d4:	428b      	cmp	r3, r1
 80018d6:	bf01      	itttt	eq
 80018d8:	6819      	ldreq	r1, [r3, #0]
 80018da:	685b      	ldreq	r3, [r3, #4]
 80018dc:	1809      	addeq	r1, r1, r0
 80018de:	6021      	streq	r1, [r4, #0]
 80018e0:	e7ed      	b.n	80018be <_free_r+0x1e>
 80018e2:	461a      	mov	r2, r3
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	b10b      	cbz	r3, 80018ec <_free_r+0x4c>
 80018e8:	42a3      	cmp	r3, r4
 80018ea:	d9fa      	bls.n	80018e2 <_free_r+0x42>
 80018ec:	6811      	ldr	r1, [r2, #0]
 80018ee:	1850      	adds	r0, r2, r1
 80018f0:	42a0      	cmp	r0, r4
 80018f2:	d10b      	bne.n	800190c <_free_r+0x6c>
 80018f4:	6820      	ldr	r0, [r4, #0]
 80018f6:	4401      	add	r1, r0
 80018f8:	1850      	adds	r0, r2, r1
 80018fa:	4283      	cmp	r3, r0
 80018fc:	6011      	str	r1, [r2, #0]
 80018fe:	d1e0      	bne.n	80018c2 <_free_r+0x22>
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	6053      	str	r3, [r2, #4]
 8001906:	4401      	add	r1, r0
 8001908:	6011      	str	r1, [r2, #0]
 800190a:	e7da      	b.n	80018c2 <_free_r+0x22>
 800190c:	d902      	bls.n	8001914 <_free_r+0x74>
 800190e:	230c      	movs	r3, #12
 8001910:	602b      	str	r3, [r5, #0]
 8001912:	e7d6      	b.n	80018c2 <_free_r+0x22>
 8001914:	6820      	ldr	r0, [r4, #0]
 8001916:	1821      	adds	r1, r4, r0
 8001918:	428b      	cmp	r3, r1
 800191a:	bf04      	itt	eq
 800191c:	6819      	ldreq	r1, [r3, #0]
 800191e:	685b      	ldreq	r3, [r3, #4]
 8001920:	6063      	str	r3, [r4, #4]
 8001922:	bf04      	itt	eq
 8001924:	1809      	addeq	r1, r1, r0
 8001926:	6021      	streq	r1, [r4, #0]
 8001928:	6054      	str	r4, [r2, #4]
 800192a:	e7ca      	b.n	80018c2 <_free_r+0x22>
 800192c:	bd38      	pop	{r3, r4, r5, pc}
 800192e:	bf00      	nop
 8001930:	20000204 	.word	0x20000204

08001934 <_malloc_r>:
 8001934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001936:	1ccd      	adds	r5, r1, #3
 8001938:	f025 0503 	bic.w	r5, r5, #3
 800193c:	3508      	adds	r5, #8
 800193e:	2d0c      	cmp	r5, #12
 8001940:	bf38      	it	cc
 8001942:	250c      	movcc	r5, #12
 8001944:	2d00      	cmp	r5, #0
 8001946:	4606      	mov	r6, r0
 8001948:	db01      	blt.n	800194e <_malloc_r+0x1a>
 800194a:	42a9      	cmp	r1, r5
 800194c:	d903      	bls.n	8001956 <_malloc_r+0x22>
 800194e:	230c      	movs	r3, #12
 8001950:	6033      	str	r3, [r6, #0]
 8001952:	2000      	movs	r0, #0
 8001954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001956:	f001 f8d3 	bl	8002b00 <__malloc_lock>
 800195a:	4921      	ldr	r1, [pc, #132]	; (80019e0 <_malloc_r+0xac>)
 800195c:	680a      	ldr	r2, [r1, #0]
 800195e:	4614      	mov	r4, r2
 8001960:	b99c      	cbnz	r4, 800198a <_malloc_r+0x56>
 8001962:	4f20      	ldr	r7, [pc, #128]	; (80019e4 <_malloc_r+0xb0>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b923      	cbnz	r3, 8001972 <_malloc_r+0x3e>
 8001968:	4621      	mov	r1, r4
 800196a:	4630      	mov	r0, r6
 800196c:	f000 fbfc 	bl	8002168 <_sbrk_r>
 8001970:	6038      	str	r0, [r7, #0]
 8001972:	4629      	mov	r1, r5
 8001974:	4630      	mov	r0, r6
 8001976:	f000 fbf7 	bl	8002168 <_sbrk_r>
 800197a:	1c43      	adds	r3, r0, #1
 800197c:	d123      	bne.n	80019c6 <_malloc_r+0x92>
 800197e:	230c      	movs	r3, #12
 8001980:	6033      	str	r3, [r6, #0]
 8001982:	4630      	mov	r0, r6
 8001984:	f001 f8c2 	bl	8002b0c <__malloc_unlock>
 8001988:	e7e3      	b.n	8001952 <_malloc_r+0x1e>
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	1b5b      	subs	r3, r3, r5
 800198e:	d417      	bmi.n	80019c0 <_malloc_r+0x8c>
 8001990:	2b0b      	cmp	r3, #11
 8001992:	d903      	bls.n	800199c <_malloc_r+0x68>
 8001994:	6023      	str	r3, [r4, #0]
 8001996:	441c      	add	r4, r3
 8001998:	6025      	str	r5, [r4, #0]
 800199a:	e004      	b.n	80019a6 <_malloc_r+0x72>
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	42a2      	cmp	r2, r4
 80019a0:	bf0c      	ite	eq
 80019a2:	600b      	streq	r3, [r1, #0]
 80019a4:	6053      	strne	r3, [r2, #4]
 80019a6:	4630      	mov	r0, r6
 80019a8:	f001 f8b0 	bl	8002b0c <__malloc_unlock>
 80019ac:	f104 000b 	add.w	r0, r4, #11
 80019b0:	1d23      	adds	r3, r4, #4
 80019b2:	f020 0007 	bic.w	r0, r0, #7
 80019b6:	1ac2      	subs	r2, r0, r3
 80019b8:	d0cc      	beq.n	8001954 <_malloc_r+0x20>
 80019ba:	1a1b      	subs	r3, r3, r0
 80019bc:	50a3      	str	r3, [r4, r2]
 80019be:	e7c9      	b.n	8001954 <_malloc_r+0x20>
 80019c0:	4622      	mov	r2, r4
 80019c2:	6864      	ldr	r4, [r4, #4]
 80019c4:	e7cc      	b.n	8001960 <_malloc_r+0x2c>
 80019c6:	1cc4      	adds	r4, r0, #3
 80019c8:	f024 0403 	bic.w	r4, r4, #3
 80019cc:	42a0      	cmp	r0, r4
 80019ce:	d0e3      	beq.n	8001998 <_malloc_r+0x64>
 80019d0:	1a21      	subs	r1, r4, r0
 80019d2:	4630      	mov	r0, r6
 80019d4:	f000 fbc8 	bl	8002168 <_sbrk_r>
 80019d8:	3001      	adds	r0, #1
 80019da:	d1dd      	bne.n	8001998 <_malloc_r+0x64>
 80019dc:	e7cf      	b.n	800197e <_malloc_r+0x4a>
 80019de:	bf00      	nop
 80019e0:	20000204 	.word	0x20000204
 80019e4:	20000208 	.word	0x20000208

080019e8 <__svfiscanf_r>:
 80019e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019ec:	461d      	mov	r5, r3
 80019ee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80019f0:	07df      	lsls	r7, r3, #31
 80019f2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80019f6:	4606      	mov	r6, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	4692      	mov	sl, r2
 80019fc:	d405      	bmi.n	8001a0a <__svfiscanf_r+0x22>
 80019fe:	898b      	ldrh	r3, [r1, #12]
 8001a00:	0598      	lsls	r0, r3, #22
 8001a02:	d402      	bmi.n	8001a0a <__svfiscanf_r+0x22>
 8001a04:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001a06:	f7ff fecb 	bl	80017a0 <__retarget_lock_acquire_recursive>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8001a10:	4ba5      	ldr	r3, [pc, #660]	; (8001ca8 <__svfiscanf_r+0x2c0>)
 8001a12:	93a0      	str	r3, [sp, #640]	; 0x280
 8001a14:	f10d 0804 	add.w	r8, sp, #4
 8001a18:	4ba4      	ldr	r3, [pc, #656]	; (8001cac <__svfiscanf_r+0x2c4>)
 8001a1a:	4fa5      	ldr	r7, [pc, #660]	; (8001cb0 <__svfiscanf_r+0x2c8>)
 8001a1c:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8001cb4 <__svfiscanf_r+0x2cc>
 8001a20:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8001a24:	93a1      	str	r3, [sp, #644]	; 0x284
 8001a26:	9500      	str	r5, [sp, #0]
 8001a28:	f89a 3000 	ldrb.w	r3, [sl]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8171 	beq.w	8001d14 <__svfiscanf_r+0x32c>
 8001a32:	5dd9      	ldrb	r1, [r3, r7]
 8001a34:	f011 0108 	ands.w	r1, r1, #8
 8001a38:	f10a 0501 	add.w	r5, sl, #1
 8001a3c:	d019      	beq.n	8001a72 <__svfiscanf_r+0x8a>
 8001a3e:	6863      	ldr	r3, [r4, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	dd0f      	ble.n	8001a64 <__svfiscanf_r+0x7c>
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	5cba      	ldrb	r2, [r7, r2]
 8001a4a:	0711      	lsls	r1, r2, #28
 8001a4c:	d401      	bmi.n	8001a52 <__svfiscanf_r+0x6a>
 8001a4e:	46aa      	mov	sl, r5
 8001a50:	e7ea      	b.n	8001a28 <__svfiscanf_r+0x40>
 8001a52:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001a54:	3201      	adds	r2, #1
 8001a56:	9245      	str	r2, [sp, #276]	; 0x114
 8001a58:	6862      	ldr	r2, [r4, #4]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	6062      	str	r2, [r4, #4]
 8001a60:	6023      	str	r3, [r4, #0]
 8001a62:	e7ec      	b.n	8001a3e <__svfiscanf_r+0x56>
 8001a64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001a66:	4621      	mov	r1, r4
 8001a68:	4630      	mov	r0, r6
 8001a6a:	4798      	blx	r3
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d0e9      	beq.n	8001a44 <__svfiscanf_r+0x5c>
 8001a70:	e7ed      	b.n	8001a4e <__svfiscanf_r+0x66>
 8001a72:	2b25      	cmp	r3, #37	; 0x25
 8001a74:	d012      	beq.n	8001a9c <__svfiscanf_r+0xb4>
 8001a76:	469a      	mov	sl, r3
 8001a78:	6863      	ldr	r3, [r4, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f340 8095 	ble.w	8001baa <__svfiscanf_r+0x1c2>
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	7813      	ldrb	r3, [r2, #0]
 8001a84:	4553      	cmp	r3, sl
 8001a86:	f040 8145 	bne.w	8001d14 <__svfiscanf_r+0x32c>
 8001a8a:	6863      	ldr	r3, [r4, #4]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	6063      	str	r3, [r4, #4]
 8001a90:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8001a92:	3201      	adds	r2, #1
 8001a94:	3301      	adds	r3, #1
 8001a96:	6022      	str	r2, [r4, #0]
 8001a98:	9345      	str	r3, [sp, #276]	; 0x114
 8001a9a:	e7d8      	b.n	8001a4e <__svfiscanf_r+0x66>
 8001a9c:	9141      	str	r1, [sp, #260]	; 0x104
 8001a9e:	9143      	str	r1, [sp, #268]	; 0x10c
 8001aa0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8001aa6:	bf02      	ittt	eq
 8001aa8:	2310      	moveq	r3, #16
 8001aaa:	9341      	streq	r3, [sp, #260]	; 0x104
 8001aac:	f10a 0502 	addeq.w	r5, sl, #2
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	46aa      	mov	sl, r5
 8001ab4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8001ab8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	d91e      	bls.n	8001afe <__svfiscanf_r+0x116>
 8001ac0:	487c      	ldr	r0, [pc, #496]	; (8001cb4 <__svfiscanf_r+0x2cc>)
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	f7fe fb84 	bl	80001d0 <memchr>
 8001ac8:	b140      	cbz	r0, 8001adc <__svfiscanf_r+0xf4>
 8001aca:	2301      	movs	r3, #1
 8001acc:	eba0 0009 	sub.w	r0, r0, r9
 8001ad0:	fa03 f000 	lsl.w	r0, r3, r0
 8001ad4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001ad6:	4318      	orrs	r0, r3
 8001ad8:	9041      	str	r0, [sp, #260]	; 0x104
 8001ada:	4655      	mov	r5, sl
 8001adc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001ae0:	2b78      	cmp	r3, #120	; 0x78
 8001ae2:	d807      	bhi.n	8001af4 <__svfiscanf_r+0x10c>
 8001ae4:	2b57      	cmp	r3, #87	; 0x57
 8001ae6:	d811      	bhi.n	8001b0c <__svfiscanf_r+0x124>
 8001ae8:	2b25      	cmp	r3, #37	; 0x25
 8001aea:	d0c4      	beq.n	8001a76 <__svfiscanf_r+0x8e>
 8001aec:	d858      	bhi.n	8001ba0 <__svfiscanf_r+0x1b8>
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80c7 	beq.w	8001c82 <__svfiscanf_r+0x29a>
 8001af4:	2303      	movs	r3, #3
 8001af6:	9347      	str	r3, [sp, #284]	; 0x11c
 8001af8:	230a      	movs	r3, #10
 8001afa:	9342      	str	r3, [sp, #264]	; 0x108
 8001afc:	e07c      	b.n	8001bf8 <__svfiscanf_r+0x210>
 8001afe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001b00:	fb02 1103 	mla	r1, r2, r3, r1
 8001b04:	3930      	subs	r1, #48	; 0x30
 8001b06:	9143      	str	r1, [sp, #268]	; 0x10c
 8001b08:	4655      	mov	r5, sl
 8001b0a:	e7d2      	b.n	8001ab2 <__svfiscanf_r+0xca>
 8001b0c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8001b10:	2a20      	cmp	r2, #32
 8001b12:	d8ef      	bhi.n	8001af4 <__svfiscanf_r+0x10c>
 8001b14:	a101      	add	r1, pc, #4	; (adr r1, 8001b1c <__svfiscanf_r+0x134>)
 8001b16:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001be3 	.word	0x08001be3
 8001b20:	08001af5 	.word	0x08001af5
 8001b24:	08001af5 	.word	0x08001af5
 8001b28:	08001c41 	.word	0x08001c41
 8001b2c:	08001af5 	.word	0x08001af5
 8001b30:	08001af5 	.word	0x08001af5
 8001b34:	08001af5 	.word	0x08001af5
 8001b38:	08001af5 	.word	0x08001af5
 8001b3c:	08001af5 	.word	0x08001af5
 8001b40:	08001af5 	.word	0x08001af5
 8001b44:	08001af5 	.word	0x08001af5
 8001b48:	08001c57 	.word	0x08001c57
 8001b4c:	08001c2d 	.word	0x08001c2d
 8001b50:	08001ba7 	.word	0x08001ba7
 8001b54:	08001ba7 	.word	0x08001ba7
 8001b58:	08001ba7 	.word	0x08001ba7
 8001b5c:	08001af5 	.word	0x08001af5
 8001b60:	08001c31 	.word	0x08001c31
 8001b64:	08001af5 	.word	0x08001af5
 8001b68:	08001af5 	.word	0x08001af5
 8001b6c:	08001af5 	.word	0x08001af5
 8001b70:	08001af5 	.word	0x08001af5
 8001b74:	08001c67 	.word	0x08001c67
 8001b78:	08001c39 	.word	0x08001c39
 8001b7c:	08001bdb 	.word	0x08001bdb
 8001b80:	08001af5 	.word	0x08001af5
 8001b84:	08001af5 	.word	0x08001af5
 8001b88:	08001c63 	.word	0x08001c63
 8001b8c:	08001af5 	.word	0x08001af5
 8001b90:	08001c2d 	.word	0x08001c2d
 8001b94:	08001af5 	.word	0x08001af5
 8001b98:	08001af5 	.word	0x08001af5
 8001b9c:	08001be3 	.word	0x08001be3
 8001ba0:	3b45      	subs	r3, #69	; 0x45
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d8a6      	bhi.n	8001af4 <__svfiscanf_r+0x10c>
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	e025      	b.n	8001bf6 <__svfiscanf_r+0x20e>
 8001baa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001bac:	4621      	mov	r1, r4
 8001bae:	4630      	mov	r0, r6
 8001bb0:	4798      	blx	r3
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	f43f af64 	beq.w	8001a80 <__svfiscanf_r+0x98>
 8001bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bba:	07da      	lsls	r2, r3, #31
 8001bbc:	f140 80a2 	bpl.w	8001d04 <__svfiscanf_r+0x31c>
 8001bc0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d066      	beq.n	8001c94 <__svfiscanf_r+0x2ac>
 8001bc6:	89a3      	ldrh	r3, [r4, #12]
 8001bc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001bcc:	bf18      	it	ne
 8001bce:	f04f 30ff 	movne.w	r0, #4294967295
 8001bd2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8001bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bda:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001bdc:	f042 0220 	orr.w	r2, r2, #32
 8001be0:	9241      	str	r2, [sp, #260]	; 0x104
 8001be2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be8:	9241      	str	r2, [sp, #260]	; 0x104
 8001bea:	2210      	movs	r2, #16
 8001bec:	2b6f      	cmp	r3, #111	; 0x6f
 8001bee:	9242      	str	r2, [sp, #264]	; 0x108
 8001bf0:	bf34      	ite	cc
 8001bf2:	2303      	movcc	r3, #3
 8001bf4:	2304      	movcs	r3, #4
 8001bf6:	9347      	str	r3, [sp, #284]	; 0x11c
 8001bf8:	6863      	ldr	r3, [r4, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	dd4d      	ble.n	8001c9a <__svfiscanf_r+0x2b2>
 8001bfe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001c00:	065b      	lsls	r3, r3, #25
 8001c02:	d404      	bmi.n	8001c0e <__svfiscanf_r+0x226>
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	5cba      	ldrb	r2, [r7, r2]
 8001c0a:	0710      	lsls	r0, r2, #28
 8001c0c:	d454      	bmi.n	8001cb8 <__svfiscanf_r+0x2d0>
 8001c0e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	dc63      	bgt.n	8001cdc <__svfiscanf_r+0x2f4>
 8001c14:	466b      	mov	r3, sp
 8001c16:	4622      	mov	r2, r4
 8001c18:	a941      	add	r1, sp, #260	; 0x104
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f000 f8b0 	bl	8001d80 <_scanf_chars>
 8001c20:	2801      	cmp	r0, #1
 8001c22:	d077      	beq.n	8001d14 <__svfiscanf_r+0x32c>
 8001c24:	2802      	cmp	r0, #2
 8001c26:	f47f af12 	bne.w	8001a4e <__svfiscanf_r+0x66>
 8001c2a:	e7c5      	b.n	8001bb8 <__svfiscanf_r+0x1d0>
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	e7dd      	b.n	8001bec <__svfiscanf_r+0x204>
 8001c30:	2300      	movs	r3, #0
 8001c32:	9342      	str	r3, [sp, #264]	; 0x108
 8001c34:	2303      	movs	r3, #3
 8001c36:	e7de      	b.n	8001bf6 <__svfiscanf_r+0x20e>
 8001c38:	2308      	movs	r3, #8
 8001c3a:	9342      	str	r3, [sp, #264]	; 0x108
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	e7da      	b.n	8001bf6 <__svfiscanf_r+0x20e>
 8001c40:	4629      	mov	r1, r5
 8001c42:	4640      	mov	r0, r8
 8001c44:	f000 faa0 	bl	8002188 <__sccl>
 8001c48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c4e:	9341      	str	r3, [sp, #260]	; 0x104
 8001c50:	4605      	mov	r5, r0
 8001c52:	2301      	movs	r3, #1
 8001c54:	e7cf      	b.n	8001bf6 <__svfiscanf_r+0x20e>
 8001c56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5c:	9341      	str	r3, [sp, #260]	; 0x104
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e7c9      	b.n	8001bf6 <__svfiscanf_r+0x20e>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e7c7      	b.n	8001bf6 <__svfiscanf_r+0x20e>
 8001c66:	9841      	ldr	r0, [sp, #260]	; 0x104
 8001c68:	06c3      	lsls	r3, r0, #27
 8001c6a:	f53f aef0 	bmi.w	8001a4e <__svfiscanf_r+0x66>
 8001c6e:	9b00      	ldr	r3, [sp, #0]
 8001c70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001c72:	1d19      	adds	r1, r3, #4
 8001c74:	9100      	str	r1, [sp, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	07c0      	lsls	r0, r0, #31
 8001c7a:	bf4c      	ite	mi
 8001c7c:	801a      	strhmi	r2, [r3, #0]
 8001c7e:	601a      	strpl	r2, [r3, #0]
 8001c80:	e6e5      	b.n	8001a4e <__svfiscanf_r+0x66>
 8001c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c84:	07d8      	lsls	r0, r3, #31
 8001c86:	d405      	bmi.n	8001c94 <__svfiscanf_r+0x2ac>
 8001c88:	89a3      	ldrh	r3, [r4, #12]
 8001c8a:	0599      	lsls	r1, r3, #22
 8001c8c:	d402      	bmi.n	8001c94 <__svfiscanf_r+0x2ac>
 8001c8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c90:	f7ff fd87 	bl	80017a2 <__retarget_lock_release_recursive>
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	e79b      	b.n	8001bd2 <__svfiscanf_r+0x1ea>
 8001c9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	4798      	blx	r3
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d0ab      	beq.n	8001bfe <__svfiscanf_r+0x216>
 8001ca6:	e787      	b.n	8001bb8 <__svfiscanf_r+0x1d0>
 8001ca8:	080024d9 	.word	0x080024d9
 8001cac:	08002055 	.word	0x08002055
 8001cb0:	08002c78 	.word	0x08002c78
 8001cb4:	08002c58 	.word	0x08002c58
 8001cb8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001cba:	3201      	adds	r2, #1
 8001cbc:	9245      	str	r2, [sp, #276]	; 0x114
 8001cbe:	6862      	ldr	r2, [r4, #4]
 8001cc0:	3a01      	subs	r2, #1
 8001cc2:	2a00      	cmp	r2, #0
 8001cc4:	6062      	str	r2, [r4, #4]
 8001cc6:	dd02      	ble.n	8001cce <__svfiscanf_r+0x2e6>
 8001cc8:	3301      	adds	r3, #1
 8001cca:	6023      	str	r3, [r4, #0]
 8001ccc:	e79a      	b.n	8001c04 <__svfiscanf_r+0x21c>
 8001cce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	4798      	blx	r3
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d094      	beq.n	8001c04 <__svfiscanf_r+0x21c>
 8001cda:	e76d      	b.n	8001bb8 <__svfiscanf_r+0x1d0>
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	dc06      	bgt.n	8001cee <__svfiscanf_r+0x306>
 8001ce0:	466b      	mov	r3, sp
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	a941      	add	r1, sp, #260	; 0x104
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f000 f8a4 	bl	8001e34 <_scanf_i>
 8001cec:	e798      	b.n	8001c20 <__svfiscanf_r+0x238>
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <__svfiscanf_r+0x344>)
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f43f aeac 	beq.w	8001a4e <__svfiscanf_r+0x66>
 8001cf6:	466b      	mov	r3, sp
 8001cf8:	4622      	mov	r2, r4
 8001cfa:	a941      	add	r1, sp, #260	; 0x104
 8001cfc:	4630      	mov	r0, r6
 8001cfe:	f3af 8000 	nop.w
 8001d02:	e78d      	b.n	8001c20 <__svfiscanf_r+0x238>
 8001d04:	89a3      	ldrh	r3, [r4, #12]
 8001d06:	0599      	lsls	r1, r3, #22
 8001d08:	f53f af5a 	bmi.w	8001bc0 <__svfiscanf_r+0x1d8>
 8001d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d0e:	f7ff fd48 	bl	80017a2 <__retarget_lock_release_recursive>
 8001d12:	e755      	b.n	8001bc0 <__svfiscanf_r+0x1d8>
 8001d14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d16:	07da      	lsls	r2, r3, #31
 8001d18:	d405      	bmi.n	8001d26 <__svfiscanf_r+0x33e>
 8001d1a:	89a3      	ldrh	r3, [r4, #12]
 8001d1c:	059b      	lsls	r3, r3, #22
 8001d1e:	d402      	bmi.n	8001d26 <__svfiscanf_r+0x33e>
 8001d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d22:	f7ff fd3e 	bl	80017a2 <__retarget_lock_release_recursive>
 8001d26:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001d28:	e753      	b.n	8001bd2 <__svfiscanf_r+0x1ea>
 8001d2a:	bf00      	nop
 8001d2c:	00000000 	.word	0x00000000

08001d30 <_vfiscanf_r>:
 8001d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d34:	460c      	mov	r4, r1
 8001d36:	4616      	mov	r6, r2
 8001d38:	461f      	mov	r7, r3
 8001d3a:	4605      	mov	r5, r0
 8001d3c:	b118      	cbz	r0, 8001d46 <_vfiscanf_r+0x16>
 8001d3e:	6983      	ldr	r3, [r0, #24]
 8001d40:	b90b      	cbnz	r3, 8001d46 <_vfiscanf_r+0x16>
 8001d42:	f000 fdab 	bl	800289c <__sinit>
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <_vfiscanf_r+0x44>)
 8001d48:	429c      	cmp	r4, r3
 8001d4a:	d108      	bne.n	8001d5e <_vfiscanf_r+0x2e>
 8001d4c:	686c      	ldr	r4, [r5, #4]
 8001d4e:	463b      	mov	r3, r7
 8001d50:	4632      	mov	r2, r6
 8001d52:	4621      	mov	r1, r4
 8001d54:	4628      	mov	r0, r5
 8001d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d5a:	f7ff be45 	b.w	80019e8 <__svfiscanf_r>
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <_vfiscanf_r+0x48>)
 8001d60:	429c      	cmp	r4, r3
 8001d62:	d101      	bne.n	8001d68 <_vfiscanf_r+0x38>
 8001d64:	68ac      	ldr	r4, [r5, #8]
 8001d66:	e7f2      	b.n	8001d4e <_vfiscanf_r+0x1e>
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <_vfiscanf_r+0x4c>)
 8001d6a:	429c      	cmp	r4, r3
 8001d6c:	bf08      	it	eq
 8001d6e:	68ec      	ldreq	r4, [r5, #12]
 8001d70:	e7ed      	b.n	8001d4e <_vfiscanf_r+0x1e>
 8001d72:	bf00      	nop
 8001d74:	08002d98 	.word	0x08002d98
 8001d78:	08002db8 	.word	0x08002db8
 8001d7c:	08002d78 	.word	0x08002d78

08001d80 <_scanf_chars>:
 8001d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d84:	4615      	mov	r5, r2
 8001d86:	688a      	ldr	r2, [r1, #8]
 8001d88:	4680      	mov	r8, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	b932      	cbnz	r2, 8001d9c <_scanf_chars+0x1c>
 8001d8e:	698a      	ldr	r2, [r1, #24]
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2201      	moveq	r2, #1
 8001d96:	f04f 32ff 	movne.w	r2, #4294967295
 8001d9a:	608a      	str	r2, [r1, #8]
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8001e30 <_scanf_chars+0xb0>
 8001da2:	06d1      	lsls	r1, r2, #27
 8001da4:	bf5f      	itttt	pl
 8001da6:	681a      	ldrpl	r2, [r3, #0]
 8001da8:	1d11      	addpl	r1, r2, #4
 8001daa:	6019      	strpl	r1, [r3, #0]
 8001dac:	6816      	ldrpl	r6, [r2, #0]
 8001dae:	2700      	movs	r7, #0
 8001db0:	69a0      	ldr	r0, [r4, #24]
 8001db2:	b188      	cbz	r0, 8001dd8 <_scanf_chars+0x58>
 8001db4:	2801      	cmp	r0, #1
 8001db6:	d107      	bne.n	8001dc8 <_scanf_chars+0x48>
 8001db8:	682b      	ldr	r3, [r5, #0]
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	6963      	ldr	r3, [r4, #20]
 8001dbe:	5c9b      	ldrb	r3, [r3, r2]
 8001dc0:	b953      	cbnz	r3, 8001dd8 <_scanf_chars+0x58>
 8001dc2:	2f00      	cmp	r7, #0
 8001dc4:	d031      	beq.n	8001e2a <_scanf_chars+0xaa>
 8001dc6:	e022      	b.n	8001e0e <_scanf_chars+0x8e>
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	d120      	bne.n	8001e0e <_scanf_chars+0x8e>
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8001dd4:	071b      	lsls	r3, r3, #28
 8001dd6:	d41a      	bmi.n	8001e0e <_scanf_chars+0x8e>
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	06da      	lsls	r2, r3, #27
 8001ddc:	bf5e      	ittt	pl
 8001dde:	682b      	ldrpl	r3, [r5, #0]
 8001de0:	781b      	ldrbpl	r3, [r3, #0]
 8001de2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001de6:	682a      	ldr	r2, [r5, #0]
 8001de8:	686b      	ldr	r3, [r5, #4]
 8001dea:	3201      	adds	r2, #1
 8001dec:	602a      	str	r2, [r5, #0]
 8001dee:	68a2      	ldr	r2, [r4, #8]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	3a01      	subs	r2, #1
 8001df4:	606b      	str	r3, [r5, #4]
 8001df6:	3701      	adds	r7, #1
 8001df8:	60a2      	str	r2, [r4, #8]
 8001dfa:	b142      	cbz	r2, 8001e0e <_scanf_chars+0x8e>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dcd7      	bgt.n	8001db0 <_scanf_chars+0x30>
 8001e00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001e04:	4629      	mov	r1, r5
 8001e06:	4640      	mov	r0, r8
 8001e08:	4798      	blx	r3
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d0d0      	beq.n	8001db0 <_scanf_chars+0x30>
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	f013 0310 	ands.w	r3, r3, #16
 8001e14:	d105      	bne.n	8001e22 <_scanf_chars+0xa2>
 8001e16:	68e2      	ldr	r2, [r4, #12]
 8001e18:	3201      	adds	r2, #1
 8001e1a:	60e2      	str	r2, [r4, #12]
 8001e1c:	69a2      	ldr	r2, [r4, #24]
 8001e1e:	b102      	cbz	r2, 8001e22 <_scanf_chars+0xa2>
 8001e20:	7033      	strb	r3, [r6, #0]
 8001e22:	6923      	ldr	r3, [r4, #16]
 8001e24:	443b      	add	r3, r7
 8001e26:	6123      	str	r3, [r4, #16]
 8001e28:	2000      	movs	r0, #0
 8001e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e2e:	bf00      	nop
 8001e30:	08002c78 	.word	0x08002c78

08001e34 <_scanf_i>:
 8001e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e38:	4698      	mov	r8, r3
 8001e3a:	4b74      	ldr	r3, [pc, #464]	; (800200c <_scanf_i+0x1d8>)
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	4682      	mov	sl, r0
 8001e40:	4616      	mov	r6, r2
 8001e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e46:	b087      	sub	sp, #28
 8001e48:	ab03      	add	r3, sp, #12
 8001e4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e4e:	4b70      	ldr	r3, [pc, #448]	; (8002010 <_scanf_i+0x1dc>)
 8001e50:	69a1      	ldr	r1, [r4, #24]
 8001e52:	4a70      	ldr	r2, [pc, #448]	; (8002014 <_scanf_i+0x1e0>)
 8001e54:	2903      	cmp	r1, #3
 8001e56:	bf18      	it	ne
 8001e58:	461a      	movne	r2, r3
 8001e5a:	68a3      	ldr	r3, [r4, #8]
 8001e5c:	9201      	str	r2, [sp, #4]
 8001e5e:	1e5a      	subs	r2, r3, #1
 8001e60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8001e64:	bf88      	it	hi
 8001e66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8001e6a:	4627      	mov	r7, r4
 8001e6c:	bf82      	ittt	hi
 8001e6e:	eb03 0905 	addhi.w	r9, r3, r5
 8001e72:	f240 135d 	movwhi	r3, #349	; 0x15d
 8001e76:	60a3      	strhi	r3, [r4, #8]
 8001e78:	f857 3b1c 	ldr.w	r3, [r7], #28
 8001e7c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8001e80:	bf98      	it	ls
 8001e82:	f04f 0900 	movls.w	r9, #0
 8001e86:	6023      	str	r3, [r4, #0]
 8001e88:	463d      	mov	r5, r7
 8001e8a:	f04f 0b00 	mov.w	fp, #0
 8001e8e:	6831      	ldr	r1, [r6, #0]
 8001e90:	ab03      	add	r3, sp, #12
 8001e92:	7809      	ldrb	r1, [r1, #0]
 8001e94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f7fe f999 	bl	80001d0 <memchr>
 8001e9e:	b328      	cbz	r0, 8001eec <_scanf_i+0xb8>
 8001ea0:	f1bb 0f01 	cmp.w	fp, #1
 8001ea4:	d159      	bne.n	8001f5a <_scanf_i+0x126>
 8001ea6:	6862      	ldr	r2, [r4, #4]
 8001ea8:	b92a      	cbnz	r2, 8001eb6 <_scanf_i+0x82>
 8001eaa:	6822      	ldr	r2, [r4, #0]
 8001eac:	2308      	movs	r3, #8
 8001eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb2:	6063      	str	r3, [r4, #4]
 8001eb4:	6022      	str	r2, [r4, #0]
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8001ebc:	6022      	str	r2, [r4, #0]
 8001ebe:	68a2      	ldr	r2, [r4, #8]
 8001ec0:	1e51      	subs	r1, r2, #1
 8001ec2:	60a1      	str	r1, [r4, #8]
 8001ec4:	b192      	cbz	r2, 8001eec <_scanf_i+0xb8>
 8001ec6:	6832      	ldr	r2, [r6, #0]
 8001ec8:	1c51      	adds	r1, r2, #1
 8001eca:	6031      	str	r1, [r6, #0]
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	f805 2b01 	strb.w	r2, [r5], #1
 8001ed2:	6872      	ldr	r2, [r6, #4]
 8001ed4:	3a01      	subs	r2, #1
 8001ed6:	2a00      	cmp	r2, #0
 8001ed8:	6072      	str	r2, [r6, #4]
 8001eda:	dc07      	bgt.n	8001eec <_scanf_i+0xb8>
 8001edc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8001ee0:	4631      	mov	r1, r6
 8001ee2:	4650      	mov	r0, sl
 8001ee4:	4790      	blx	r2
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	f040 8085 	bne.w	8001ff6 <_scanf_i+0x1c2>
 8001eec:	f10b 0b01 	add.w	fp, fp, #1
 8001ef0:	f1bb 0f03 	cmp.w	fp, #3
 8001ef4:	d1cb      	bne.n	8001e8e <_scanf_i+0x5a>
 8001ef6:	6863      	ldr	r3, [r4, #4]
 8001ef8:	b90b      	cbnz	r3, 8001efe <_scanf_i+0xca>
 8001efa:	230a      	movs	r3, #10
 8001efc:	6063      	str	r3, [r4, #4]
 8001efe:	6863      	ldr	r3, [r4, #4]
 8001f00:	4945      	ldr	r1, [pc, #276]	; (8002018 <_scanf_i+0x1e4>)
 8001f02:	6960      	ldr	r0, [r4, #20]
 8001f04:	1ac9      	subs	r1, r1, r3
 8001f06:	f000 f93f 	bl	8002188 <__sccl>
 8001f0a:	f04f 0b00 	mov.w	fp, #0
 8001f0e:	68a3      	ldr	r3, [r4, #8]
 8001f10:	6822      	ldr	r2, [r4, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03d      	beq.n	8001f92 <_scanf_i+0x15e>
 8001f16:	6831      	ldr	r1, [r6, #0]
 8001f18:	6960      	ldr	r0, [r4, #20]
 8001f1a:	f891 c000 	ldrb.w	ip, [r1]
 8001f1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d035      	beq.n	8001f92 <_scanf_i+0x15e>
 8001f26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8001f2a:	d124      	bne.n	8001f76 <_scanf_i+0x142>
 8001f2c:	0510      	lsls	r0, r2, #20
 8001f2e:	d522      	bpl.n	8001f76 <_scanf_i+0x142>
 8001f30:	f10b 0b01 	add.w	fp, fp, #1
 8001f34:	f1b9 0f00 	cmp.w	r9, #0
 8001f38:	d003      	beq.n	8001f42 <_scanf_i+0x10e>
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f109 39ff 	add.w	r9, r9, #4294967295
 8001f40:	60a3      	str	r3, [r4, #8]
 8001f42:	6873      	ldr	r3, [r6, #4]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	6073      	str	r3, [r6, #4]
 8001f4a:	dd1b      	ble.n	8001f84 <_scanf_i+0x150>
 8001f4c:	6833      	ldr	r3, [r6, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	6033      	str	r3, [r6, #0]
 8001f52:	68a3      	ldr	r3, [r4, #8]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	60a3      	str	r3, [r4, #8]
 8001f58:	e7d9      	b.n	8001f0e <_scanf_i+0xda>
 8001f5a:	f1bb 0f02 	cmp.w	fp, #2
 8001f5e:	d1ae      	bne.n	8001ebe <_scanf_i+0x8a>
 8001f60:	6822      	ldr	r2, [r4, #0]
 8001f62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8001f66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001f6a:	d1bf      	bne.n	8001eec <_scanf_i+0xb8>
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	6063      	str	r3, [r4, #4]
 8001f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f74:	e7a2      	b.n	8001ebc <_scanf_i+0x88>
 8001f76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8001f7a:	6022      	str	r2, [r4, #0]
 8001f7c:	780b      	ldrb	r3, [r1, #0]
 8001f7e:	f805 3b01 	strb.w	r3, [r5], #1
 8001f82:	e7de      	b.n	8001f42 <_scanf_i+0x10e>
 8001f84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001f88:	4631      	mov	r1, r6
 8001f8a:	4650      	mov	r0, sl
 8001f8c:	4798      	blx	r3
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d0df      	beq.n	8001f52 <_scanf_i+0x11e>
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	05d9      	lsls	r1, r3, #23
 8001f96:	d50d      	bpl.n	8001fb4 <_scanf_i+0x180>
 8001f98:	42bd      	cmp	r5, r7
 8001f9a:	d909      	bls.n	8001fb0 <_scanf_i+0x17c>
 8001f9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001fa4:	4632      	mov	r2, r6
 8001fa6:	4650      	mov	r0, sl
 8001fa8:	4798      	blx	r3
 8001faa:	f105 39ff 	add.w	r9, r5, #4294967295
 8001fae:	464d      	mov	r5, r9
 8001fb0:	42bd      	cmp	r5, r7
 8001fb2:	d028      	beq.n	8002006 <_scanf_i+0x1d2>
 8001fb4:	6822      	ldr	r2, [r4, #0]
 8001fb6:	f012 0210 	ands.w	r2, r2, #16
 8001fba:	d113      	bne.n	8001fe4 <_scanf_i+0x1b0>
 8001fbc:	702a      	strb	r2, [r5, #0]
 8001fbe:	6863      	ldr	r3, [r4, #4]
 8001fc0:	9e01      	ldr	r6, [sp, #4]
 8001fc2:	4639      	mov	r1, r7
 8001fc4:	4650      	mov	r0, sl
 8001fc6:	47b0      	blx	r6
 8001fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8001fcc:	6821      	ldr	r1, [r4, #0]
 8001fce:	1d1a      	adds	r2, r3, #4
 8001fd0:	f8c8 2000 	str.w	r2, [r8]
 8001fd4:	f011 0f20 	tst.w	r1, #32
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	d00f      	beq.n	8001ffc <_scanf_i+0x1c8>
 8001fdc:	6018      	str	r0, [r3, #0]
 8001fde:	68e3      	ldr	r3, [r4, #12]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	60e3      	str	r3, [r4, #12]
 8001fe4:	1bed      	subs	r5, r5, r7
 8001fe6:	44ab      	add	fp, r5
 8001fe8:	6925      	ldr	r5, [r4, #16]
 8001fea:	445d      	add	r5, fp
 8001fec:	6125      	str	r5, [r4, #16]
 8001fee:	2000      	movs	r0, #0
 8001ff0:	b007      	add	sp, #28
 8001ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff6:	f04f 0b00 	mov.w	fp, #0
 8001ffa:	e7ca      	b.n	8001f92 <_scanf_i+0x15e>
 8001ffc:	07ca      	lsls	r2, r1, #31
 8001ffe:	bf4c      	ite	mi
 8002000:	8018      	strhmi	r0, [r3, #0]
 8002002:	6018      	strpl	r0, [r3, #0]
 8002004:	e7eb      	b.n	8001fde <_scanf_i+0x1aa>
 8002006:	2001      	movs	r0, #1
 8002008:	e7f2      	b.n	8001ff0 <_scanf_i+0x1bc>
 800200a:	bf00      	nop
 800200c:	08002c34 	.word	0x08002c34
 8002010:	08002461 	.word	0x08002461
 8002014:	08002379 	.word	0x08002379
 8002018:	08002c75 	.word	0x08002c75

0800201c <_open_r>:
 800201c:	b538      	push	{r3, r4, r5, lr}
 800201e:	4d07      	ldr	r5, [pc, #28]	; (800203c <_open_r+0x20>)
 8002020:	4604      	mov	r4, r0
 8002022:	4608      	mov	r0, r1
 8002024:	4611      	mov	r1, r2
 8002026:	2200      	movs	r2, #0
 8002028:	602a      	str	r2, [r5, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	f000 fdd4 	bl	8002bd8 <_open>
 8002030:	1c43      	adds	r3, r0, #1
 8002032:	d102      	bne.n	800203a <_open_r+0x1e>
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	b103      	cbz	r3, 800203a <_open_r+0x1e>
 8002038:	6023      	str	r3, [r4, #0]
 800203a:	bd38      	pop	{r3, r4, r5, pc}
 800203c:	2000020c 	.word	0x2000020c

08002040 <lflush>:
 8002040:	8983      	ldrh	r3, [r0, #12]
 8002042:	f003 0309 	and.w	r3, r3, #9
 8002046:	2b09      	cmp	r3, #9
 8002048:	d101      	bne.n	800204e <lflush+0xe>
 800204a:	f000 bbbd 	b.w	80027c8 <fflush>
 800204e:	2000      	movs	r0, #0
 8002050:	4770      	bx	lr
 8002052:	0000      	movs	r0, r0

08002054 <__srefill_r>:
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002056:	460c      	mov	r4, r1
 8002058:	4605      	mov	r5, r0
 800205a:	b118      	cbz	r0, 8002064 <__srefill_r+0x10>
 800205c:	6983      	ldr	r3, [r0, #24]
 800205e:	b90b      	cbnz	r3, 8002064 <__srefill_r+0x10>
 8002060:	f000 fc1c 	bl	800289c <__sinit>
 8002064:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <__srefill_r+0x100>)
 8002066:	429c      	cmp	r4, r3
 8002068:	d10a      	bne.n	8002080 <__srefill_r+0x2c>
 800206a:	686c      	ldr	r4, [r5, #4]
 800206c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002070:	2300      	movs	r3, #0
 8002072:	6063      	str	r3, [r4, #4]
 8002074:	89a3      	ldrh	r3, [r4, #12]
 8002076:	069e      	lsls	r6, r3, #26
 8002078:	d50c      	bpl.n	8002094 <__srefill_r+0x40>
 800207a:	f04f 30ff 	mov.w	r0, #4294967295
 800207e:	e066      	b.n	800214e <__srefill_r+0xfa>
 8002080:	4b35      	ldr	r3, [pc, #212]	; (8002158 <__srefill_r+0x104>)
 8002082:	429c      	cmp	r4, r3
 8002084:	d101      	bne.n	800208a <__srefill_r+0x36>
 8002086:	68ac      	ldr	r4, [r5, #8]
 8002088:	e7f0      	b.n	800206c <__srefill_r+0x18>
 800208a:	4b34      	ldr	r3, [pc, #208]	; (800215c <__srefill_r+0x108>)
 800208c:	429c      	cmp	r4, r3
 800208e:	bf08      	it	eq
 8002090:	68ec      	ldreq	r4, [r5, #12]
 8002092:	e7eb      	b.n	800206c <__srefill_r+0x18>
 8002094:	0758      	lsls	r0, r3, #29
 8002096:	d448      	bmi.n	800212a <__srefill_r+0xd6>
 8002098:	06d9      	lsls	r1, r3, #27
 800209a:	d405      	bmi.n	80020a8 <__srefill_r+0x54>
 800209c:	2309      	movs	r3, #9
 800209e:	602b      	str	r3, [r5, #0]
 80020a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020a4:	81a3      	strh	r3, [r4, #12]
 80020a6:	e7e8      	b.n	800207a <__srefill_r+0x26>
 80020a8:	071a      	lsls	r2, r3, #28
 80020aa:	d50b      	bpl.n	80020c4 <__srefill_r+0x70>
 80020ac:	4621      	mov	r1, r4
 80020ae:	4628      	mov	r0, r5
 80020b0:	f000 fb4e 	bl	8002750 <_fflush_r>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d1e0      	bne.n	800207a <__srefill_r+0x26>
 80020b8:	89a3      	ldrh	r3, [r4, #12]
 80020ba:	60a0      	str	r0, [r4, #8]
 80020bc:	f023 0308 	bic.w	r3, r3, #8
 80020c0:	81a3      	strh	r3, [r4, #12]
 80020c2:	61a0      	str	r0, [r4, #24]
 80020c4:	89a3      	ldrh	r3, [r4, #12]
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	81a3      	strh	r3, [r4, #12]
 80020cc:	6923      	ldr	r3, [r4, #16]
 80020ce:	b91b      	cbnz	r3, 80020d8 <__srefill_r+0x84>
 80020d0:	4621      	mov	r1, r4
 80020d2:	4628      	mov	r0, r5
 80020d4:	f7ff fb8c 	bl	80017f0 <__smakebuf_r>
 80020d8:	89a6      	ldrh	r6, [r4, #12]
 80020da:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80020de:	07b3      	lsls	r3, r6, #30
 80020e0:	d00f      	beq.n	8002102 <__srefill_r+0xae>
 80020e2:	2301      	movs	r3, #1
 80020e4:	81a3      	strh	r3, [r4, #12]
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <__srefill_r+0x10c>)
 80020e8:	491e      	ldr	r1, [pc, #120]	; (8002164 <__srefill_r+0x110>)
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	f006 0609 	and.w	r6, r6, #9
 80020f0:	f000 fc9a 	bl	8002a28 <_fwalk>
 80020f4:	2e09      	cmp	r6, #9
 80020f6:	81a7      	strh	r7, [r4, #12]
 80020f8:	d103      	bne.n	8002102 <__srefill_r+0xae>
 80020fa:	4621      	mov	r1, r4
 80020fc:	4628      	mov	r0, r5
 80020fe:	f000 faa5 	bl	800264c <__sflush_r>
 8002102:	6922      	ldr	r2, [r4, #16]
 8002104:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002106:	6963      	ldr	r3, [r4, #20]
 8002108:	6a21      	ldr	r1, [r4, #32]
 800210a:	6022      	str	r2, [r4, #0]
 800210c:	4628      	mov	r0, r5
 800210e:	47b0      	blx	r6
 8002110:	2800      	cmp	r0, #0
 8002112:	6060      	str	r0, [r4, #4]
 8002114:	dc1c      	bgt.n	8002150 <__srefill_r+0xfc>
 8002116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800211a:	bf17      	itett	ne
 800211c:	2200      	movne	r2, #0
 800211e:	f043 0320 	orreq.w	r3, r3, #32
 8002122:	6062      	strne	r2, [r4, #4]
 8002124:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002128:	e7bc      	b.n	80020a4 <__srefill_r+0x50>
 800212a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800212c:	2900      	cmp	r1, #0
 800212e:	d0cd      	beq.n	80020cc <__srefill_r+0x78>
 8002130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002134:	4299      	cmp	r1, r3
 8002136:	d002      	beq.n	800213e <__srefill_r+0xea>
 8002138:	4628      	mov	r0, r5
 800213a:	f7ff fbb1 	bl	80018a0 <_free_r>
 800213e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002140:	6063      	str	r3, [r4, #4]
 8002142:	2000      	movs	r0, #0
 8002144:	6360      	str	r0, [r4, #52]	; 0x34
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0c0      	beq.n	80020cc <__srefill_r+0x78>
 800214a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800214c:	6023      	str	r3, [r4, #0]
 800214e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002150:	2000      	movs	r0, #0
 8002152:	e7fc      	b.n	800214e <__srefill_r+0xfa>
 8002154:	08002d98 	.word	0x08002d98
 8002158:	08002db8 	.word	0x08002db8
 800215c:	08002d78 	.word	0x08002d78
 8002160:	08002c54 	.word	0x08002c54
 8002164:	08002041 	.word	0x08002041

08002168 <_sbrk_r>:
 8002168:	b538      	push	{r3, r4, r5, lr}
 800216a:	4d06      	ldr	r5, [pc, #24]	; (8002184 <_sbrk_r+0x1c>)
 800216c:	2300      	movs	r3, #0
 800216e:	4604      	mov	r4, r0
 8002170:	4608      	mov	r0, r1
 8002172:	602b      	str	r3, [r5, #0]
 8002174:	f7ff f920 	bl	80013b8 <_sbrk>
 8002178:	1c43      	adds	r3, r0, #1
 800217a:	d102      	bne.n	8002182 <_sbrk_r+0x1a>
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	b103      	cbz	r3, 8002182 <_sbrk_r+0x1a>
 8002180:	6023      	str	r3, [r4, #0]
 8002182:	bd38      	pop	{r3, r4, r5, pc}
 8002184:	2000020c 	.word	0x2000020c

08002188 <__sccl>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	780b      	ldrb	r3, [r1, #0]
 800218c:	4604      	mov	r4, r0
 800218e:	2b5e      	cmp	r3, #94	; 0x5e
 8002190:	bf0b      	itete	eq
 8002192:	784b      	ldrbeq	r3, [r1, #1]
 8002194:	1c48      	addne	r0, r1, #1
 8002196:	1c88      	addeq	r0, r1, #2
 8002198:	2200      	movne	r2, #0
 800219a:	bf08      	it	eq
 800219c:	2201      	moveq	r2, #1
 800219e:	1e61      	subs	r1, r4, #1
 80021a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80021a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80021a8:	42a9      	cmp	r1, r5
 80021aa:	d1fb      	bne.n	80021a4 <__sccl+0x1c>
 80021ac:	b90b      	cbnz	r3, 80021b2 <__sccl+0x2a>
 80021ae:	3801      	subs	r0, #1
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	f082 0201 	eor.w	r2, r2, #1
 80021b6:	54e2      	strb	r2, [r4, r3]
 80021b8:	4605      	mov	r5, r0
 80021ba:	4628      	mov	r0, r5
 80021bc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80021c0:	292d      	cmp	r1, #45	; 0x2d
 80021c2:	d006      	beq.n	80021d2 <__sccl+0x4a>
 80021c4:	295d      	cmp	r1, #93	; 0x5d
 80021c6:	d0f3      	beq.n	80021b0 <__sccl+0x28>
 80021c8:	b909      	cbnz	r1, 80021ce <__sccl+0x46>
 80021ca:	4628      	mov	r0, r5
 80021cc:	e7f0      	b.n	80021b0 <__sccl+0x28>
 80021ce:	460b      	mov	r3, r1
 80021d0:	e7f1      	b.n	80021b6 <__sccl+0x2e>
 80021d2:	786e      	ldrb	r6, [r5, #1]
 80021d4:	2e5d      	cmp	r6, #93	; 0x5d
 80021d6:	d0fa      	beq.n	80021ce <__sccl+0x46>
 80021d8:	42b3      	cmp	r3, r6
 80021da:	dcf8      	bgt.n	80021ce <__sccl+0x46>
 80021dc:	3502      	adds	r5, #2
 80021de:	4619      	mov	r1, r3
 80021e0:	3101      	adds	r1, #1
 80021e2:	428e      	cmp	r6, r1
 80021e4:	5462      	strb	r2, [r4, r1]
 80021e6:	dcfb      	bgt.n	80021e0 <__sccl+0x58>
 80021e8:	1af1      	subs	r1, r6, r3
 80021ea:	3901      	subs	r1, #1
 80021ec:	1c58      	adds	r0, r3, #1
 80021ee:	42b3      	cmp	r3, r6
 80021f0:	bfa8      	it	ge
 80021f2:	2100      	movge	r1, #0
 80021f4:	1843      	adds	r3, r0, r1
 80021f6:	e7e0      	b.n	80021ba <__sccl+0x32>

080021f8 <__sread>:
 80021f8:	b510      	push	{r4, lr}
 80021fa:	460c      	mov	r4, r1
 80021fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002200:	f000 fcb0 	bl	8002b64 <_read_r>
 8002204:	2800      	cmp	r0, #0
 8002206:	bfab      	itete	ge
 8002208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800220a:	89a3      	ldrhlt	r3, [r4, #12]
 800220c:	181b      	addge	r3, r3, r0
 800220e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002212:	bfac      	ite	ge
 8002214:	6563      	strge	r3, [r4, #84]	; 0x54
 8002216:	81a3      	strhlt	r3, [r4, #12]
 8002218:	bd10      	pop	{r4, pc}

0800221a <__swrite>:
 800221a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800221e:	461f      	mov	r7, r3
 8002220:	898b      	ldrh	r3, [r1, #12]
 8002222:	05db      	lsls	r3, r3, #23
 8002224:	4605      	mov	r5, r0
 8002226:	460c      	mov	r4, r1
 8002228:	4616      	mov	r6, r2
 800222a:	d505      	bpl.n	8002238 <__swrite+0x1e>
 800222c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002230:	2302      	movs	r3, #2
 8002232:	2200      	movs	r2, #0
 8002234:	f000 fc44 	bl	8002ac0 <_lseek_r>
 8002238:	89a3      	ldrh	r3, [r4, #12]
 800223a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800223e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002242:	81a3      	strh	r3, [r4, #12]
 8002244:	4632      	mov	r2, r6
 8002246:	463b      	mov	r3, r7
 8002248:	4628      	mov	r0, r5
 800224a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800224e:	f000 b9db 	b.w	8002608 <_write_r>

08002252 <__sseek>:
 8002252:	b510      	push	{r4, lr}
 8002254:	460c      	mov	r4, r1
 8002256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800225a:	f000 fc31 	bl	8002ac0 <_lseek_r>
 800225e:	1c43      	adds	r3, r0, #1
 8002260:	89a3      	ldrh	r3, [r4, #12]
 8002262:	bf15      	itete	ne
 8002264:	6560      	strne	r0, [r4, #84]	; 0x54
 8002266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800226a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800226e:	81a3      	strheq	r3, [r4, #12]
 8002270:	bf18      	it	ne
 8002272:	81a3      	strhne	r3, [r4, #12]
 8002274:	bd10      	pop	{r4, pc}

08002276 <__sclose>:
 8002276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800227a:	f000 b9d7 	b.w	800262c <_close_r>
 800227e:	0000      	movs	r0, r0

08002280 <_strtol_l.constprop.0>:
 8002280:	2b01      	cmp	r3, #1
 8002282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002286:	4680      	mov	r8, r0
 8002288:	d001      	beq.n	800228e <_strtol_l.constprop.0+0xe>
 800228a:	2b24      	cmp	r3, #36	; 0x24
 800228c:	d906      	bls.n	800229c <_strtol_l.constprop.0+0x1c>
 800228e:	f7ff f8d3 	bl	8001438 <__errno>
 8002292:	2316      	movs	r3, #22
 8002294:	6003      	str	r3, [r0, #0]
 8002296:	2000      	movs	r0, #0
 8002298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800229c:	4f35      	ldr	r7, [pc, #212]	; (8002374 <_strtol_l.constprop.0+0xf4>)
 800229e:	460d      	mov	r5, r1
 80022a0:	4628      	mov	r0, r5
 80022a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80022a6:	5de6      	ldrb	r6, [r4, r7]
 80022a8:	f016 0608 	ands.w	r6, r6, #8
 80022ac:	d1f8      	bne.n	80022a0 <_strtol_l.constprop.0+0x20>
 80022ae:	2c2d      	cmp	r4, #45	; 0x2d
 80022b0:	d12f      	bne.n	8002312 <_strtol_l.constprop.0+0x92>
 80022b2:	782c      	ldrb	r4, [r5, #0]
 80022b4:	2601      	movs	r6, #1
 80022b6:	1c85      	adds	r5, r0, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d057      	beq.n	800236c <_strtol_l.constprop.0+0xec>
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d109      	bne.n	80022d4 <_strtol_l.constprop.0+0x54>
 80022c0:	2c30      	cmp	r4, #48	; 0x30
 80022c2:	d107      	bne.n	80022d4 <_strtol_l.constprop.0+0x54>
 80022c4:	7828      	ldrb	r0, [r5, #0]
 80022c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80022ca:	2858      	cmp	r0, #88	; 0x58
 80022cc:	d149      	bne.n	8002362 <_strtol_l.constprop.0+0xe2>
 80022ce:	786c      	ldrb	r4, [r5, #1]
 80022d0:	2310      	movs	r3, #16
 80022d2:	3502      	adds	r5, #2
 80022d4:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80022d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80022dc:	2700      	movs	r7, #0
 80022de:	fbbe f9f3 	udiv	r9, lr, r3
 80022e2:	4638      	mov	r0, r7
 80022e4:	fb03 ea19 	mls	sl, r3, r9, lr
 80022e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80022ec:	f1bc 0f09 	cmp.w	ip, #9
 80022f0:	d814      	bhi.n	800231c <_strtol_l.constprop.0+0x9c>
 80022f2:	4664      	mov	r4, ip
 80022f4:	42a3      	cmp	r3, r4
 80022f6:	dd22      	ble.n	800233e <_strtol_l.constprop.0+0xbe>
 80022f8:	2f00      	cmp	r7, #0
 80022fa:	db1d      	blt.n	8002338 <_strtol_l.constprop.0+0xb8>
 80022fc:	4581      	cmp	r9, r0
 80022fe:	d31b      	bcc.n	8002338 <_strtol_l.constprop.0+0xb8>
 8002300:	d101      	bne.n	8002306 <_strtol_l.constprop.0+0x86>
 8002302:	45a2      	cmp	sl, r4
 8002304:	db18      	blt.n	8002338 <_strtol_l.constprop.0+0xb8>
 8002306:	fb00 4003 	mla	r0, r0, r3, r4
 800230a:	2701      	movs	r7, #1
 800230c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002310:	e7ea      	b.n	80022e8 <_strtol_l.constprop.0+0x68>
 8002312:	2c2b      	cmp	r4, #43	; 0x2b
 8002314:	bf04      	itt	eq
 8002316:	782c      	ldrbeq	r4, [r5, #0]
 8002318:	1c85      	addeq	r5, r0, #2
 800231a:	e7cd      	b.n	80022b8 <_strtol_l.constprop.0+0x38>
 800231c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002320:	f1bc 0f19 	cmp.w	ip, #25
 8002324:	d801      	bhi.n	800232a <_strtol_l.constprop.0+0xaa>
 8002326:	3c37      	subs	r4, #55	; 0x37
 8002328:	e7e4      	b.n	80022f4 <_strtol_l.constprop.0+0x74>
 800232a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800232e:	f1bc 0f19 	cmp.w	ip, #25
 8002332:	d804      	bhi.n	800233e <_strtol_l.constprop.0+0xbe>
 8002334:	3c57      	subs	r4, #87	; 0x57
 8002336:	e7dd      	b.n	80022f4 <_strtol_l.constprop.0+0x74>
 8002338:	f04f 37ff 	mov.w	r7, #4294967295
 800233c:	e7e6      	b.n	800230c <_strtol_l.constprop.0+0x8c>
 800233e:	2f00      	cmp	r7, #0
 8002340:	da07      	bge.n	8002352 <_strtol_l.constprop.0+0xd2>
 8002342:	2322      	movs	r3, #34	; 0x22
 8002344:	f8c8 3000 	str.w	r3, [r8]
 8002348:	4670      	mov	r0, lr
 800234a:	2a00      	cmp	r2, #0
 800234c:	d0a4      	beq.n	8002298 <_strtol_l.constprop.0+0x18>
 800234e:	1e69      	subs	r1, r5, #1
 8002350:	e005      	b.n	800235e <_strtol_l.constprop.0+0xde>
 8002352:	b106      	cbz	r6, 8002356 <_strtol_l.constprop.0+0xd6>
 8002354:	4240      	negs	r0, r0
 8002356:	2a00      	cmp	r2, #0
 8002358:	d09e      	beq.n	8002298 <_strtol_l.constprop.0+0x18>
 800235a:	2f00      	cmp	r7, #0
 800235c:	d1f7      	bne.n	800234e <_strtol_l.constprop.0+0xce>
 800235e:	6011      	str	r1, [r2, #0]
 8002360:	e79a      	b.n	8002298 <_strtol_l.constprop.0+0x18>
 8002362:	2430      	movs	r4, #48	; 0x30
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1b5      	bne.n	80022d4 <_strtol_l.constprop.0+0x54>
 8002368:	2308      	movs	r3, #8
 800236a:	e7b3      	b.n	80022d4 <_strtol_l.constprop.0+0x54>
 800236c:	2c30      	cmp	r4, #48	; 0x30
 800236e:	d0a9      	beq.n	80022c4 <_strtol_l.constprop.0+0x44>
 8002370:	230a      	movs	r3, #10
 8002372:	e7af      	b.n	80022d4 <_strtol_l.constprop.0+0x54>
 8002374:	08002c78 	.word	0x08002c78

08002378 <_strtol_r>:
 8002378:	f7ff bf82 	b.w	8002280 <_strtol_l.constprop.0>

0800237c <_strtoul_l.constprop.0>:
 800237c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002380:	4f36      	ldr	r7, [pc, #216]	; (800245c <_strtoul_l.constprop.0+0xe0>)
 8002382:	4686      	mov	lr, r0
 8002384:	460d      	mov	r5, r1
 8002386:	4628      	mov	r0, r5
 8002388:	f815 4b01 	ldrb.w	r4, [r5], #1
 800238c:	5de6      	ldrb	r6, [r4, r7]
 800238e:	f016 0608 	ands.w	r6, r6, #8
 8002392:	d1f8      	bne.n	8002386 <_strtoul_l.constprop.0+0xa>
 8002394:	2c2d      	cmp	r4, #45	; 0x2d
 8002396:	d12f      	bne.n	80023f8 <_strtoul_l.constprop.0+0x7c>
 8002398:	782c      	ldrb	r4, [r5, #0]
 800239a:	2601      	movs	r6, #1
 800239c:	1c85      	adds	r5, r0, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d057      	beq.n	8002452 <_strtoul_l.constprop.0+0xd6>
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d109      	bne.n	80023ba <_strtoul_l.constprop.0+0x3e>
 80023a6:	2c30      	cmp	r4, #48	; 0x30
 80023a8:	d107      	bne.n	80023ba <_strtoul_l.constprop.0+0x3e>
 80023aa:	7828      	ldrb	r0, [r5, #0]
 80023ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80023b0:	2858      	cmp	r0, #88	; 0x58
 80023b2:	d149      	bne.n	8002448 <_strtoul_l.constprop.0+0xcc>
 80023b4:	786c      	ldrb	r4, [r5, #1]
 80023b6:	2310      	movs	r3, #16
 80023b8:	3502      	adds	r5, #2
 80023ba:	f04f 38ff 	mov.w	r8, #4294967295
 80023be:	2700      	movs	r7, #0
 80023c0:	fbb8 f8f3 	udiv	r8, r8, r3
 80023c4:	fb03 f908 	mul.w	r9, r3, r8
 80023c8:	ea6f 0909 	mvn.w	r9, r9
 80023cc:	4638      	mov	r0, r7
 80023ce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80023d2:	f1bc 0f09 	cmp.w	ip, #9
 80023d6:	d814      	bhi.n	8002402 <_strtoul_l.constprop.0+0x86>
 80023d8:	4664      	mov	r4, ip
 80023da:	42a3      	cmp	r3, r4
 80023dc:	dd22      	ble.n	8002424 <_strtoul_l.constprop.0+0xa8>
 80023de:	2f00      	cmp	r7, #0
 80023e0:	db1d      	blt.n	800241e <_strtoul_l.constprop.0+0xa2>
 80023e2:	4580      	cmp	r8, r0
 80023e4:	d31b      	bcc.n	800241e <_strtoul_l.constprop.0+0xa2>
 80023e6:	d101      	bne.n	80023ec <_strtoul_l.constprop.0+0x70>
 80023e8:	45a1      	cmp	r9, r4
 80023ea:	db18      	blt.n	800241e <_strtoul_l.constprop.0+0xa2>
 80023ec:	fb00 4003 	mla	r0, r0, r3, r4
 80023f0:	2701      	movs	r7, #1
 80023f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80023f6:	e7ea      	b.n	80023ce <_strtoul_l.constprop.0+0x52>
 80023f8:	2c2b      	cmp	r4, #43	; 0x2b
 80023fa:	bf04      	itt	eq
 80023fc:	782c      	ldrbeq	r4, [r5, #0]
 80023fe:	1c85      	addeq	r5, r0, #2
 8002400:	e7cd      	b.n	800239e <_strtoul_l.constprop.0+0x22>
 8002402:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002406:	f1bc 0f19 	cmp.w	ip, #25
 800240a:	d801      	bhi.n	8002410 <_strtoul_l.constprop.0+0x94>
 800240c:	3c37      	subs	r4, #55	; 0x37
 800240e:	e7e4      	b.n	80023da <_strtoul_l.constprop.0+0x5e>
 8002410:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002414:	f1bc 0f19 	cmp.w	ip, #25
 8002418:	d804      	bhi.n	8002424 <_strtoul_l.constprop.0+0xa8>
 800241a:	3c57      	subs	r4, #87	; 0x57
 800241c:	e7dd      	b.n	80023da <_strtoul_l.constprop.0+0x5e>
 800241e:	f04f 37ff 	mov.w	r7, #4294967295
 8002422:	e7e6      	b.n	80023f2 <_strtoul_l.constprop.0+0x76>
 8002424:	2f00      	cmp	r7, #0
 8002426:	da07      	bge.n	8002438 <_strtoul_l.constprop.0+0xbc>
 8002428:	2322      	movs	r3, #34	; 0x22
 800242a:	f8ce 3000 	str.w	r3, [lr]
 800242e:	f04f 30ff 	mov.w	r0, #4294967295
 8002432:	b932      	cbnz	r2, 8002442 <_strtoul_l.constprop.0+0xc6>
 8002434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002438:	b106      	cbz	r6, 800243c <_strtoul_l.constprop.0+0xc0>
 800243a:	4240      	negs	r0, r0
 800243c:	2a00      	cmp	r2, #0
 800243e:	d0f9      	beq.n	8002434 <_strtoul_l.constprop.0+0xb8>
 8002440:	b107      	cbz	r7, 8002444 <_strtoul_l.constprop.0+0xc8>
 8002442:	1e69      	subs	r1, r5, #1
 8002444:	6011      	str	r1, [r2, #0]
 8002446:	e7f5      	b.n	8002434 <_strtoul_l.constprop.0+0xb8>
 8002448:	2430      	movs	r4, #48	; 0x30
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1b5      	bne.n	80023ba <_strtoul_l.constprop.0+0x3e>
 800244e:	2308      	movs	r3, #8
 8002450:	e7b3      	b.n	80023ba <_strtoul_l.constprop.0+0x3e>
 8002452:	2c30      	cmp	r4, #48	; 0x30
 8002454:	d0a9      	beq.n	80023aa <_strtoul_l.constprop.0+0x2e>
 8002456:	230a      	movs	r3, #10
 8002458:	e7af      	b.n	80023ba <_strtoul_l.constprop.0+0x3e>
 800245a:	bf00      	nop
 800245c:	08002c78 	.word	0x08002c78

08002460 <_strtoul_r>:
 8002460:	f7ff bf8c 	b.w	800237c <_strtoul_l.constprop.0>

08002464 <__submore>:
 8002464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002468:	460c      	mov	r4, r1
 800246a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800246c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002470:	4299      	cmp	r1, r3
 8002472:	d11d      	bne.n	80024b0 <__submore+0x4c>
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	f7ff fa5c 	bl	8001934 <_malloc_r>
 800247c:	b918      	cbnz	r0, 8002486 <__submore+0x22>
 800247e:	f04f 30ff 	mov.w	r0, #4294967295
 8002482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800248a:	63a3      	str	r3, [r4, #56]	; 0x38
 800248c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002490:	6360      	str	r0, [r4, #52]	; 0x34
 8002492:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002496:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800249a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800249e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80024a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80024a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80024aa:	6020      	str	r0, [r4, #0]
 80024ac:	2000      	movs	r0, #0
 80024ae:	e7e8      	b.n	8002482 <__submore+0x1e>
 80024b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80024b2:	0077      	lsls	r7, r6, #1
 80024b4:	463a      	mov	r2, r7
 80024b6:	f000 fb2f 	bl	8002b18 <_realloc_r>
 80024ba:	4605      	mov	r5, r0
 80024bc:	2800      	cmp	r0, #0
 80024be:	d0de      	beq.n	800247e <__submore+0x1a>
 80024c0:	eb00 0806 	add.w	r8, r0, r6
 80024c4:	4601      	mov	r1, r0
 80024c6:	4632      	mov	r2, r6
 80024c8:	4640      	mov	r0, r8
 80024ca:	f000 fb0b 	bl	8002ae4 <memcpy>
 80024ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80024d2:	f8c4 8000 	str.w	r8, [r4]
 80024d6:	e7e9      	b.n	80024ac <__submore+0x48>

080024d8 <_ungetc_r>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	4614      	mov	r4, r2
 80024dc:	1c4a      	adds	r2, r1, #1
 80024de:	4606      	mov	r6, r0
 80024e0:	460d      	mov	r5, r1
 80024e2:	d103      	bne.n	80024ec <_ungetc_r+0x14>
 80024e4:	f04f 35ff 	mov.w	r5, #4294967295
 80024e8:	4628      	mov	r0, r5
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
 80024ec:	b118      	cbz	r0, 80024f6 <_ungetc_r+0x1e>
 80024ee:	6983      	ldr	r3, [r0, #24]
 80024f0:	b90b      	cbnz	r3, 80024f6 <_ungetc_r+0x1e>
 80024f2:	f000 f9d3 	bl	800289c <__sinit>
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <_ungetc_r+0x124>)
 80024f8:	429c      	cmp	r4, r3
 80024fa:	d11d      	bne.n	8002538 <_ungetc_r+0x60>
 80024fc:	6874      	ldr	r4, [r6, #4]
 80024fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002500:	07db      	lsls	r3, r3, #31
 8002502:	d405      	bmi.n	8002510 <_ungetc_r+0x38>
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	0598      	lsls	r0, r3, #22
 8002508:	d402      	bmi.n	8002510 <_ungetc_r+0x38>
 800250a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800250c:	f7ff f948 	bl	80017a0 <__retarget_lock_acquire_recursive>
 8002510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002514:	f023 0320 	bic.w	r3, r3, #32
 8002518:	0759      	lsls	r1, r3, #29
 800251a:	81a3      	strh	r3, [r4, #12]
 800251c:	b29a      	uxth	r2, r3
 800251e:	d42d      	bmi.n	800257c <_ungetc_r+0xa4>
 8002520:	06d3      	lsls	r3, r2, #27
 8002522:	d413      	bmi.n	800254c <_ungetc_r+0x74>
 8002524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002526:	07dd      	lsls	r5, r3, #31
 8002528:	d4dc      	bmi.n	80024e4 <_ungetc_r+0xc>
 800252a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800252e:	d1d9      	bne.n	80024e4 <_ungetc_r+0xc>
 8002530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002532:	f7ff f936 	bl	80017a2 <__retarget_lock_release_recursive>
 8002536:	e7d5      	b.n	80024e4 <_ungetc_r+0xc>
 8002538:	4b31      	ldr	r3, [pc, #196]	; (8002600 <_ungetc_r+0x128>)
 800253a:	429c      	cmp	r4, r3
 800253c:	d101      	bne.n	8002542 <_ungetc_r+0x6a>
 800253e:	68b4      	ldr	r4, [r6, #8]
 8002540:	e7dd      	b.n	80024fe <_ungetc_r+0x26>
 8002542:	4b30      	ldr	r3, [pc, #192]	; (8002604 <_ungetc_r+0x12c>)
 8002544:	429c      	cmp	r4, r3
 8002546:	bf08      	it	eq
 8002548:	68f4      	ldreq	r4, [r6, #12]
 800254a:	e7d8      	b.n	80024fe <_ungetc_r+0x26>
 800254c:	0710      	lsls	r0, r2, #28
 800254e:	d511      	bpl.n	8002574 <_ungetc_r+0x9c>
 8002550:	4621      	mov	r1, r4
 8002552:	4630      	mov	r0, r6
 8002554:	f000 f8fc 	bl	8002750 <_fflush_r>
 8002558:	b130      	cbz	r0, 8002568 <_ungetc_r+0x90>
 800255a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800255c:	07d9      	lsls	r1, r3, #31
 800255e:	d4c1      	bmi.n	80024e4 <_ungetc_r+0xc>
 8002560:	89a3      	ldrh	r3, [r4, #12]
 8002562:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002566:	e7e2      	b.n	800252e <_ungetc_r+0x56>
 8002568:	89a3      	ldrh	r3, [r4, #12]
 800256a:	60a0      	str	r0, [r4, #8]
 800256c:	f023 0308 	bic.w	r3, r3, #8
 8002570:	81a3      	strh	r3, [r4, #12]
 8002572:	61a0      	str	r0, [r4, #24]
 8002574:	89a3      	ldrh	r3, [r4, #12]
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	81a3      	strh	r3, [r4, #12]
 800257c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800257e:	6862      	ldr	r2, [r4, #4]
 8002580:	b2ed      	uxtb	r5, r5
 8002582:	b1d3      	cbz	r3, 80025ba <_ungetc_r+0xe2>
 8002584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002586:	4293      	cmp	r3, r2
 8002588:	dc05      	bgt.n	8002596 <_ungetc_r+0xbe>
 800258a:	4621      	mov	r1, r4
 800258c:	4630      	mov	r0, r6
 800258e:	f7ff ff69 	bl	8002464 <__submore>
 8002592:	2800      	cmp	r0, #0
 8002594:	d1e1      	bne.n	800255a <_ungetc_r+0x82>
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	6022      	str	r2, [r4, #0]
 800259c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	3301      	adds	r3, #1
 80025a4:	6063      	str	r3, [r4, #4]
 80025a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025a8:	07da      	lsls	r2, r3, #31
 80025aa:	d49d      	bmi.n	80024e8 <_ungetc_r+0x10>
 80025ac:	89a3      	ldrh	r3, [r4, #12]
 80025ae:	059b      	lsls	r3, r3, #22
 80025b0:	d49a      	bmi.n	80024e8 <_ungetc_r+0x10>
 80025b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025b4:	f7ff f8f5 	bl	80017a2 <__retarget_lock_release_recursive>
 80025b8:	e796      	b.n	80024e8 <_ungetc_r+0x10>
 80025ba:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80025bc:	6920      	ldr	r0, [r4, #16]
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	f001 0101 	and.w	r1, r1, #1
 80025c4:	b160      	cbz	r0, 80025e0 <_ungetc_r+0x108>
 80025c6:	4298      	cmp	r0, r3
 80025c8:	d20a      	bcs.n	80025e0 <_ungetc_r+0x108>
 80025ca:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80025ce:	42a8      	cmp	r0, r5
 80025d0:	d106      	bne.n	80025e0 <_ungetc_r+0x108>
 80025d2:	3b01      	subs	r3, #1
 80025d4:	3201      	adds	r2, #1
 80025d6:	6023      	str	r3, [r4, #0]
 80025d8:	6062      	str	r2, [r4, #4]
 80025da:	2900      	cmp	r1, #0
 80025dc:	d184      	bne.n	80024e8 <_ungetc_r+0x10>
 80025de:	e7e5      	b.n	80025ac <_ungetc_r+0xd4>
 80025e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80025e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025e8:	6363      	str	r3, [r4, #52]	; 0x34
 80025ea:	2303      	movs	r3, #3
 80025ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80025ee:	4623      	mov	r3, r4
 80025f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	2301      	movs	r3, #1
 80025f8:	6063      	str	r3, [r4, #4]
 80025fa:	e7ee      	b.n	80025da <_ungetc_r+0x102>
 80025fc:	08002d98 	.word	0x08002d98
 8002600:	08002db8 	.word	0x08002db8
 8002604:	08002d78 	.word	0x08002d78

08002608 <_write_r>:
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	4d07      	ldr	r5, [pc, #28]	; (8002628 <_write_r+0x20>)
 800260c:	4604      	mov	r4, r0
 800260e:	4608      	mov	r0, r1
 8002610:	4611      	mov	r1, r2
 8002612:	2200      	movs	r2, #0
 8002614:	602a      	str	r2, [r5, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	f000 faee 	bl	8002bf8 <_write>
 800261c:	1c43      	adds	r3, r0, #1
 800261e:	d102      	bne.n	8002626 <_write_r+0x1e>
 8002620:	682b      	ldr	r3, [r5, #0]
 8002622:	b103      	cbz	r3, 8002626 <_write_r+0x1e>
 8002624:	6023      	str	r3, [r4, #0]
 8002626:	bd38      	pop	{r3, r4, r5, pc}
 8002628:	2000020c 	.word	0x2000020c

0800262c <_close_r>:
 800262c:	b538      	push	{r3, r4, r5, lr}
 800262e:	4d06      	ldr	r5, [pc, #24]	; (8002648 <_close_r+0x1c>)
 8002630:	2300      	movs	r3, #0
 8002632:	4604      	mov	r4, r0
 8002634:	4608      	mov	r0, r1
 8002636:	602b      	str	r3, [r5, #0]
 8002638:	f000 faae 	bl	8002b98 <_close>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d102      	bne.n	8002646 <_close_r+0x1a>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	b103      	cbz	r3, 8002646 <_close_r+0x1a>
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	2000020c 	.word	0x2000020c

0800264c <__sflush_r>:
 800264c:	898a      	ldrh	r2, [r1, #12]
 800264e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002650:	4605      	mov	r5, r0
 8002652:	0710      	lsls	r0, r2, #28
 8002654:	460c      	mov	r4, r1
 8002656:	d457      	bmi.n	8002708 <__sflush_r+0xbc>
 8002658:	684b      	ldr	r3, [r1, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	dc04      	bgt.n	8002668 <__sflush_r+0x1c>
 800265e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	dc01      	bgt.n	8002668 <__sflush_r+0x1c>
 8002664:	2000      	movs	r0, #0
 8002666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800266a:	2e00      	cmp	r6, #0
 800266c:	d0fa      	beq.n	8002664 <__sflush_r+0x18>
 800266e:	2300      	movs	r3, #0
 8002670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002674:	682f      	ldr	r7, [r5, #0]
 8002676:	602b      	str	r3, [r5, #0]
 8002678:	d032      	beq.n	80026e0 <__sflush_r+0x94>
 800267a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800267c:	89a3      	ldrh	r3, [r4, #12]
 800267e:	075a      	lsls	r2, r3, #29
 8002680:	d505      	bpl.n	800268e <__sflush_r+0x42>
 8002682:	6863      	ldr	r3, [r4, #4]
 8002684:	1ac0      	subs	r0, r0, r3
 8002686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002688:	b10b      	cbz	r3, 800268e <__sflush_r+0x42>
 800268a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800268c:	1ac0      	subs	r0, r0, r3
 800268e:	2300      	movs	r3, #0
 8002690:	4602      	mov	r2, r0
 8002692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002694:	6a21      	ldr	r1, [r4, #32]
 8002696:	4628      	mov	r0, r5
 8002698:	47b0      	blx	r6
 800269a:	1c43      	adds	r3, r0, #1
 800269c:	89a3      	ldrh	r3, [r4, #12]
 800269e:	d106      	bne.n	80026ae <__sflush_r+0x62>
 80026a0:	6829      	ldr	r1, [r5, #0]
 80026a2:	291d      	cmp	r1, #29
 80026a4:	d82c      	bhi.n	8002700 <__sflush_r+0xb4>
 80026a6:	4a29      	ldr	r2, [pc, #164]	; (800274c <__sflush_r+0x100>)
 80026a8:	40ca      	lsrs	r2, r1
 80026aa:	07d6      	lsls	r6, r2, #31
 80026ac:	d528      	bpl.n	8002700 <__sflush_r+0xb4>
 80026ae:	2200      	movs	r2, #0
 80026b0:	6062      	str	r2, [r4, #4]
 80026b2:	04d9      	lsls	r1, r3, #19
 80026b4:	6922      	ldr	r2, [r4, #16]
 80026b6:	6022      	str	r2, [r4, #0]
 80026b8:	d504      	bpl.n	80026c4 <__sflush_r+0x78>
 80026ba:	1c42      	adds	r2, r0, #1
 80026bc:	d101      	bne.n	80026c2 <__sflush_r+0x76>
 80026be:	682b      	ldr	r3, [r5, #0]
 80026c0:	b903      	cbnz	r3, 80026c4 <__sflush_r+0x78>
 80026c2:	6560      	str	r0, [r4, #84]	; 0x54
 80026c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026c6:	602f      	str	r7, [r5, #0]
 80026c8:	2900      	cmp	r1, #0
 80026ca:	d0cb      	beq.n	8002664 <__sflush_r+0x18>
 80026cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026d0:	4299      	cmp	r1, r3
 80026d2:	d002      	beq.n	80026da <__sflush_r+0x8e>
 80026d4:	4628      	mov	r0, r5
 80026d6:	f7ff f8e3 	bl	80018a0 <_free_r>
 80026da:	2000      	movs	r0, #0
 80026dc:	6360      	str	r0, [r4, #52]	; 0x34
 80026de:	e7c2      	b.n	8002666 <__sflush_r+0x1a>
 80026e0:	6a21      	ldr	r1, [r4, #32]
 80026e2:	2301      	movs	r3, #1
 80026e4:	4628      	mov	r0, r5
 80026e6:	47b0      	blx	r6
 80026e8:	1c41      	adds	r1, r0, #1
 80026ea:	d1c7      	bne.n	800267c <__sflush_r+0x30>
 80026ec:	682b      	ldr	r3, [r5, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0c4      	beq.n	800267c <__sflush_r+0x30>
 80026f2:	2b1d      	cmp	r3, #29
 80026f4:	d001      	beq.n	80026fa <__sflush_r+0xae>
 80026f6:	2b16      	cmp	r3, #22
 80026f8:	d101      	bne.n	80026fe <__sflush_r+0xb2>
 80026fa:	602f      	str	r7, [r5, #0]
 80026fc:	e7b2      	b.n	8002664 <__sflush_r+0x18>
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002704:	81a3      	strh	r3, [r4, #12]
 8002706:	e7ae      	b.n	8002666 <__sflush_r+0x1a>
 8002708:	690f      	ldr	r7, [r1, #16]
 800270a:	2f00      	cmp	r7, #0
 800270c:	d0aa      	beq.n	8002664 <__sflush_r+0x18>
 800270e:	0793      	lsls	r3, r2, #30
 8002710:	680e      	ldr	r6, [r1, #0]
 8002712:	bf08      	it	eq
 8002714:	694b      	ldreq	r3, [r1, #20]
 8002716:	600f      	str	r7, [r1, #0]
 8002718:	bf18      	it	ne
 800271a:	2300      	movne	r3, #0
 800271c:	1bf6      	subs	r6, r6, r7
 800271e:	608b      	str	r3, [r1, #8]
 8002720:	2e00      	cmp	r6, #0
 8002722:	dd9f      	ble.n	8002664 <__sflush_r+0x18>
 8002724:	6a21      	ldr	r1, [r4, #32]
 8002726:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800272a:	4633      	mov	r3, r6
 800272c:	463a      	mov	r2, r7
 800272e:	4628      	mov	r0, r5
 8002730:	47e0      	blx	ip
 8002732:	2800      	cmp	r0, #0
 8002734:	dc06      	bgt.n	8002744 <__sflush_r+0xf8>
 8002736:	89a3      	ldrh	r3, [r4, #12]
 8002738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800273c:	81a3      	strh	r3, [r4, #12]
 800273e:	f04f 30ff 	mov.w	r0, #4294967295
 8002742:	e790      	b.n	8002666 <__sflush_r+0x1a>
 8002744:	4407      	add	r7, r0
 8002746:	1a36      	subs	r6, r6, r0
 8002748:	e7ea      	b.n	8002720 <__sflush_r+0xd4>
 800274a:	bf00      	nop
 800274c:	20400001 	.word	0x20400001

08002750 <_fflush_r>:
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	690b      	ldr	r3, [r1, #16]
 8002754:	4605      	mov	r5, r0
 8002756:	460c      	mov	r4, r1
 8002758:	b913      	cbnz	r3, 8002760 <_fflush_r+0x10>
 800275a:	2500      	movs	r5, #0
 800275c:	4628      	mov	r0, r5
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	b118      	cbz	r0, 800276a <_fflush_r+0x1a>
 8002762:	6983      	ldr	r3, [r0, #24]
 8002764:	b90b      	cbnz	r3, 800276a <_fflush_r+0x1a>
 8002766:	f000 f899 	bl	800289c <__sinit>
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <_fflush_r+0x6c>)
 800276c:	429c      	cmp	r4, r3
 800276e:	d11b      	bne.n	80027a8 <_fflush_r+0x58>
 8002770:	686c      	ldr	r4, [r5, #4]
 8002772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0ef      	beq.n	800275a <_fflush_r+0xa>
 800277a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800277c:	07d0      	lsls	r0, r2, #31
 800277e:	d404      	bmi.n	800278a <_fflush_r+0x3a>
 8002780:	0599      	lsls	r1, r3, #22
 8002782:	d402      	bmi.n	800278a <_fflush_r+0x3a>
 8002784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002786:	f7ff f80b 	bl	80017a0 <__retarget_lock_acquire_recursive>
 800278a:	4628      	mov	r0, r5
 800278c:	4621      	mov	r1, r4
 800278e:	f7ff ff5d 	bl	800264c <__sflush_r>
 8002792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002794:	07da      	lsls	r2, r3, #31
 8002796:	4605      	mov	r5, r0
 8002798:	d4e0      	bmi.n	800275c <_fflush_r+0xc>
 800279a:	89a3      	ldrh	r3, [r4, #12]
 800279c:	059b      	lsls	r3, r3, #22
 800279e:	d4dd      	bmi.n	800275c <_fflush_r+0xc>
 80027a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027a2:	f7fe fffe 	bl	80017a2 <__retarget_lock_release_recursive>
 80027a6:	e7d9      	b.n	800275c <_fflush_r+0xc>
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <_fflush_r+0x70>)
 80027aa:	429c      	cmp	r4, r3
 80027ac:	d101      	bne.n	80027b2 <_fflush_r+0x62>
 80027ae:	68ac      	ldr	r4, [r5, #8]
 80027b0:	e7df      	b.n	8002772 <_fflush_r+0x22>
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <_fflush_r+0x74>)
 80027b4:	429c      	cmp	r4, r3
 80027b6:	bf08      	it	eq
 80027b8:	68ec      	ldreq	r4, [r5, #12]
 80027ba:	e7da      	b.n	8002772 <_fflush_r+0x22>
 80027bc:	08002d98 	.word	0x08002d98
 80027c0:	08002db8 	.word	0x08002db8
 80027c4:	08002d78 	.word	0x08002d78

080027c8 <fflush>:
 80027c8:	4601      	mov	r1, r0
 80027ca:	b920      	cbnz	r0, 80027d6 <fflush+0xe>
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <fflush+0x18>)
 80027ce:	4905      	ldr	r1, [pc, #20]	; (80027e4 <fflush+0x1c>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	f000 b946 	b.w	8002a62 <_fwalk_reent>
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <fflush+0x20>)
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	f7ff bfb9 	b.w	8002750 <_fflush_r>
 80027de:	bf00      	nop
 80027e0:	08002c54 	.word	0x08002c54
 80027e4:	08002751 	.word	0x08002751
 80027e8:	20000000 	.word	0x20000000

080027ec <std>:
 80027ec:	2300      	movs	r3, #0
 80027ee:	b510      	push	{r4, lr}
 80027f0:	4604      	mov	r4, r0
 80027f2:	e9c0 3300 	strd	r3, r3, [r0]
 80027f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027fa:	6083      	str	r3, [r0, #8]
 80027fc:	8181      	strh	r1, [r0, #12]
 80027fe:	6643      	str	r3, [r0, #100]	; 0x64
 8002800:	81c2      	strh	r2, [r0, #14]
 8002802:	6183      	str	r3, [r0, #24]
 8002804:	4619      	mov	r1, r3
 8002806:	2208      	movs	r2, #8
 8002808:	305c      	adds	r0, #92	; 0x5c
 800280a:	f7ff f841 	bl	8001890 <memset>
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <std+0x38>)
 8002810:	6263      	str	r3, [r4, #36]	; 0x24
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <std+0x3c>)
 8002814:	62a3      	str	r3, [r4, #40]	; 0x28
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <std+0x40>)
 8002818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <std+0x44>)
 800281c:	6224      	str	r4, [r4, #32]
 800281e:	6323      	str	r3, [r4, #48]	; 0x30
 8002820:	bd10      	pop	{r4, pc}
 8002822:	bf00      	nop
 8002824:	080021f9 	.word	0x080021f9
 8002828:	0800221b 	.word	0x0800221b
 800282c:	08002253 	.word	0x08002253
 8002830:	08002277 	.word	0x08002277

08002834 <_cleanup_r>:
 8002834:	4901      	ldr	r1, [pc, #4]	; (800283c <_cleanup_r+0x8>)
 8002836:	f000 b914 	b.w	8002a62 <_fwalk_reent>
 800283a:	bf00      	nop
 800283c:	08002751 	.word	0x08002751

08002840 <__sfmoreglue>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	2268      	movs	r2, #104	; 0x68
 8002844:	1e4d      	subs	r5, r1, #1
 8002846:	4355      	muls	r5, r2
 8002848:	460e      	mov	r6, r1
 800284a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800284e:	f7ff f871 	bl	8001934 <_malloc_r>
 8002852:	4604      	mov	r4, r0
 8002854:	b140      	cbz	r0, 8002868 <__sfmoreglue+0x28>
 8002856:	2100      	movs	r1, #0
 8002858:	e9c0 1600 	strd	r1, r6, [r0]
 800285c:	300c      	adds	r0, #12
 800285e:	60a0      	str	r0, [r4, #8]
 8002860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002864:	f7ff f814 	bl	8001890 <memset>
 8002868:	4620      	mov	r0, r4
 800286a:	bd70      	pop	{r4, r5, r6, pc}

0800286c <__sfp_lock_acquire>:
 800286c:	4801      	ldr	r0, [pc, #4]	; (8002874 <__sfp_lock_acquire+0x8>)
 800286e:	f7fe bf97 	b.w	80017a0 <__retarget_lock_acquire_recursive>
 8002872:	bf00      	nop
 8002874:	20000201 	.word	0x20000201

08002878 <__sfp_lock_release>:
 8002878:	4801      	ldr	r0, [pc, #4]	; (8002880 <__sfp_lock_release+0x8>)
 800287a:	f7fe bf92 	b.w	80017a2 <__retarget_lock_release_recursive>
 800287e:	bf00      	nop
 8002880:	20000201 	.word	0x20000201

08002884 <__sinit_lock_acquire>:
 8002884:	4801      	ldr	r0, [pc, #4]	; (800288c <__sinit_lock_acquire+0x8>)
 8002886:	f7fe bf8b 	b.w	80017a0 <__retarget_lock_acquire_recursive>
 800288a:	bf00      	nop
 800288c:	20000202 	.word	0x20000202

08002890 <__sinit_lock_release>:
 8002890:	4801      	ldr	r0, [pc, #4]	; (8002898 <__sinit_lock_release+0x8>)
 8002892:	f7fe bf86 	b.w	80017a2 <__retarget_lock_release_recursive>
 8002896:	bf00      	nop
 8002898:	20000202 	.word	0x20000202

0800289c <__sinit>:
 800289c:	b510      	push	{r4, lr}
 800289e:	4604      	mov	r4, r0
 80028a0:	f7ff fff0 	bl	8002884 <__sinit_lock_acquire>
 80028a4:	69a3      	ldr	r3, [r4, #24]
 80028a6:	b11b      	cbz	r3, 80028b0 <__sinit+0x14>
 80028a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ac:	f7ff bff0 	b.w	8002890 <__sinit_lock_release>
 80028b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80028b4:	6523      	str	r3, [r4, #80]	; 0x50
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <__sinit+0x68>)
 80028b8:	4a13      	ldr	r2, [pc, #76]	; (8002908 <__sinit+0x6c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80028be:	42a3      	cmp	r3, r4
 80028c0:	bf04      	itt	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	61a3      	streq	r3, [r4, #24]
 80028c6:	4620      	mov	r0, r4
 80028c8:	f000 f820 	bl	800290c <__sfp>
 80028cc:	6060      	str	r0, [r4, #4]
 80028ce:	4620      	mov	r0, r4
 80028d0:	f000 f81c 	bl	800290c <__sfp>
 80028d4:	60a0      	str	r0, [r4, #8]
 80028d6:	4620      	mov	r0, r4
 80028d8:	f000 f818 	bl	800290c <__sfp>
 80028dc:	2200      	movs	r2, #0
 80028de:	60e0      	str	r0, [r4, #12]
 80028e0:	2104      	movs	r1, #4
 80028e2:	6860      	ldr	r0, [r4, #4]
 80028e4:	f7ff ff82 	bl	80027ec <std>
 80028e8:	68a0      	ldr	r0, [r4, #8]
 80028ea:	2201      	movs	r2, #1
 80028ec:	2109      	movs	r1, #9
 80028ee:	f7ff ff7d 	bl	80027ec <std>
 80028f2:	68e0      	ldr	r0, [r4, #12]
 80028f4:	2202      	movs	r2, #2
 80028f6:	2112      	movs	r1, #18
 80028f8:	f7ff ff78 	bl	80027ec <std>
 80028fc:	2301      	movs	r3, #1
 80028fe:	61a3      	str	r3, [r4, #24]
 8002900:	e7d2      	b.n	80028a8 <__sinit+0xc>
 8002902:	bf00      	nop
 8002904:	08002c54 	.word	0x08002c54
 8002908:	08002835 	.word	0x08002835

0800290c <__sfp>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	4607      	mov	r7, r0
 8002910:	f7ff ffac 	bl	800286c <__sfp_lock_acquire>
 8002914:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <__sfp+0x84>)
 8002916:	681e      	ldr	r6, [r3, #0]
 8002918:	69b3      	ldr	r3, [r6, #24]
 800291a:	b913      	cbnz	r3, 8002922 <__sfp+0x16>
 800291c:	4630      	mov	r0, r6
 800291e:	f7ff ffbd 	bl	800289c <__sinit>
 8002922:	3648      	adds	r6, #72	; 0x48
 8002924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002928:	3b01      	subs	r3, #1
 800292a:	d503      	bpl.n	8002934 <__sfp+0x28>
 800292c:	6833      	ldr	r3, [r6, #0]
 800292e:	b30b      	cbz	r3, 8002974 <__sfp+0x68>
 8002930:	6836      	ldr	r6, [r6, #0]
 8002932:	e7f7      	b.n	8002924 <__sfp+0x18>
 8002934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002938:	b9d5      	cbnz	r5, 8002970 <__sfp+0x64>
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <__sfp+0x88>)
 800293c:	60e3      	str	r3, [r4, #12]
 800293e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002942:	6665      	str	r5, [r4, #100]	; 0x64
 8002944:	f7fe ff2a 	bl	800179c <__retarget_lock_init_recursive>
 8002948:	f7ff ff96 	bl	8002878 <__sfp_lock_release>
 800294c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002954:	6025      	str	r5, [r4, #0]
 8002956:	61a5      	str	r5, [r4, #24]
 8002958:	2208      	movs	r2, #8
 800295a:	4629      	mov	r1, r5
 800295c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002960:	f7fe ff96 	bl	8001890 <memset>
 8002964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800296c:	4620      	mov	r0, r4
 800296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002970:	3468      	adds	r4, #104	; 0x68
 8002972:	e7d9      	b.n	8002928 <__sfp+0x1c>
 8002974:	2104      	movs	r1, #4
 8002976:	4638      	mov	r0, r7
 8002978:	f7ff ff62 	bl	8002840 <__sfmoreglue>
 800297c:	4604      	mov	r4, r0
 800297e:	6030      	str	r0, [r6, #0]
 8002980:	2800      	cmp	r0, #0
 8002982:	d1d5      	bne.n	8002930 <__sfp+0x24>
 8002984:	f7ff ff78 	bl	8002878 <__sfp_lock_release>
 8002988:	230c      	movs	r3, #12
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	e7ee      	b.n	800296c <__sfp+0x60>
 800298e:	bf00      	nop
 8002990:	08002c54 	.word	0x08002c54
 8002994:	ffff0001 	.word	0xffff0001

08002998 <__sflags>:
 8002998:	780b      	ldrb	r3, [r1, #0]
 800299a:	2b72      	cmp	r3, #114	; 0x72
 800299c:	b530      	push	{r4, r5, lr}
 800299e:	d022      	beq.n	80029e6 <__sflags+0x4e>
 80029a0:	2b77      	cmp	r3, #119	; 0x77
 80029a2:	d024      	beq.n	80029ee <__sflags+0x56>
 80029a4:	2b61      	cmp	r3, #97	; 0x61
 80029a6:	d027      	beq.n	80029f8 <__sflags+0x60>
 80029a8:	2316      	movs	r3, #22
 80029aa:	6003      	str	r3, [r0, #0]
 80029ac:	2000      	movs	r0, #0
 80029ae:	bd30      	pop	{r4, r5, pc}
 80029b0:	2d62      	cmp	r5, #98	; 0x62
 80029b2:	d012      	beq.n	80029da <__sflags+0x42>
 80029b4:	2d78      	cmp	r5, #120	; 0x78
 80029b6:	d013      	beq.n	80029e0 <__sflags+0x48>
 80029b8:	2d2b      	cmp	r5, #43	; 0x2b
 80029ba:	d107      	bne.n	80029cc <__sflags+0x34>
 80029bc:	f020 001c 	bic.w	r0, r0, #28
 80029c0:	f023 0303 	bic.w	r3, r3, #3
 80029c4:	f040 0010 	orr.w	r0, r0, #16
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80029d0:	2d00      	cmp	r5, #0
 80029d2:	d1ed      	bne.n	80029b0 <__sflags+0x18>
 80029d4:	4323      	orrs	r3, r4
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e7e9      	b.n	80029ae <__sflags+0x16>
 80029da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029de:	e7f5      	b.n	80029cc <__sflags+0x34>
 80029e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e4:	e7f2      	b.n	80029cc <__sflags+0x34>
 80029e6:	2400      	movs	r4, #0
 80029e8:	4623      	mov	r3, r4
 80029ea:	2004      	movs	r0, #4
 80029ec:	e7ee      	b.n	80029cc <__sflags+0x34>
 80029ee:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80029f2:	2301      	movs	r3, #1
 80029f4:	2008      	movs	r0, #8
 80029f6:	e7e9      	b.n	80029cc <__sflags+0x34>
 80029f8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80029fc:	2301      	movs	r3, #1
 80029fe:	f44f 7084 	mov.w	r0, #264	; 0x108
 8002a02:	e7e3      	b.n	80029cc <__sflags+0x34>

08002a04 <_fstat_r>:
 8002a04:	b538      	push	{r3, r4, r5, lr}
 8002a06:	4d07      	ldr	r5, [pc, #28]	; (8002a24 <_fstat_r+0x20>)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	602b      	str	r3, [r5, #0]
 8002a12:	f000 f8c9 	bl	8002ba8 <_fstat>
 8002a16:	1c43      	adds	r3, r0, #1
 8002a18:	d102      	bne.n	8002a20 <_fstat_r+0x1c>
 8002a1a:	682b      	ldr	r3, [r5, #0]
 8002a1c:	b103      	cbz	r3, 8002a20 <_fstat_r+0x1c>
 8002a1e:	6023      	str	r3, [r4, #0]
 8002a20:	bd38      	pop	{r3, r4, r5, pc}
 8002a22:	bf00      	nop
 8002a24:	2000020c 	.word	0x2000020c

08002a28 <_fwalk>:
 8002a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a2c:	460f      	mov	r7, r1
 8002a2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a32:	2600      	movs	r6, #0
 8002a34:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8002a38:	f1b8 0801 	subs.w	r8, r8, #1
 8002a3c:	d505      	bpl.n	8002a4a <_fwalk+0x22>
 8002a3e:	6824      	ldr	r4, [r4, #0]
 8002a40:	2c00      	cmp	r4, #0
 8002a42:	d1f7      	bne.n	8002a34 <_fwalk+0xc>
 8002a44:	4630      	mov	r0, r6
 8002a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a4a:	89ab      	ldrh	r3, [r5, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d906      	bls.n	8002a5e <_fwalk+0x36>
 8002a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a54:	3301      	adds	r3, #1
 8002a56:	d002      	beq.n	8002a5e <_fwalk+0x36>
 8002a58:	4628      	mov	r0, r5
 8002a5a:	47b8      	blx	r7
 8002a5c:	4306      	orrs	r6, r0
 8002a5e:	3568      	adds	r5, #104	; 0x68
 8002a60:	e7ea      	b.n	8002a38 <_fwalk+0x10>

08002a62 <_fwalk_reent>:
 8002a62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a66:	4606      	mov	r6, r0
 8002a68:	4688      	mov	r8, r1
 8002a6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a6e:	2700      	movs	r7, #0
 8002a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a74:	f1b9 0901 	subs.w	r9, r9, #1
 8002a78:	d505      	bpl.n	8002a86 <_fwalk_reent+0x24>
 8002a7a:	6824      	ldr	r4, [r4, #0]
 8002a7c:	2c00      	cmp	r4, #0
 8002a7e:	d1f7      	bne.n	8002a70 <_fwalk_reent+0xe>
 8002a80:	4638      	mov	r0, r7
 8002a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a86:	89ab      	ldrh	r3, [r5, #12]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d907      	bls.n	8002a9c <_fwalk_reent+0x3a>
 8002a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a90:	3301      	adds	r3, #1
 8002a92:	d003      	beq.n	8002a9c <_fwalk_reent+0x3a>
 8002a94:	4629      	mov	r1, r5
 8002a96:	4630      	mov	r0, r6
 8002a98:	47c0      	blx	r8
 8002a9a:	4307      	orrs	r7, r0
 8002a9c:	3568      	adds	r5, #104	; 0x68
 8002a9e:	e7e9      	b.n	8002a74 <_fwalk_reent+0x12>

08002aa0 <_isatty_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	4d06      	ldr	r5, [pc, #24]	; (8002abc <_isatty_r+0x1c>)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	602b      	str	r3, [r5, #0]
 8002aac:	f000 f884 	bl	8002bb8 <_isatty>
 8002ab0:	1c43      	adds	r3, r0, #1
 8002ab2:	d102      	bne.n	8002aba <_isatty_r+0x1a>
 8002ab4:	682b      	ldr	r3, [r5, #0]
 8002ab6:	b103      	cbz	r3, 8002aba <_isatty_r+0x1a>
 8002ab8:	6023      	str	r3, [r4, #0]
 8002aba:	bd38      	pop	{r3, r4, r5, pc}
 8002abc:	2000020c 	.word	0x2000020c

08002ac0 <_lseek_r>:
 8002ac0:	b538      	push	{r3, r4, r5, lr}
 8002ac2:	4d07      	ldr	r5, [pc, #28]	; (8002ae0 <_lseek_r+0x20>)
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	4608      	mov	r0, r1
 8002ac8:	4611      	mov	r1, r2
 8002aca:	2200      	movs	r2, #0
 8002acc:	602a      	str	r2, [r5, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f000 f87a 	bl	8002bc8 <_lseek>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	d102      	bne.n	8002ade <_lseek_r+0x1e>
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	b103      	cbz	r3, 8002ade <_lseek_r+0x1e>
 8002adc:	6023      	str	r3, [r4, #0]
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	2000020c 	.word	0x2000020c

08002ae4 <memcpy>:
 8002ae4:	440a      	add	r2, r1
 8002ae6:	4291      	cmp	r1, r2
 8002ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002aec:	d100      	bne.n	8002af0 <memcpy+0xc>
 8002aee:	4770      	bx	lr
 8002af0:	b510      	push	{r4, lr}
 8002af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002afa:	4291      	cmp	r1, r2
 8002afc:	d1f9      	bne.n	8002af2 <memcpy+0xe>
 8002afe:	bd10      	pop	{r4, pc}

08002b00 <__malloc_lock>:
 8002b00:	4801      	ldr	r0, [pc, #4]	; (8002b08 <__malloc_lock+0x8>)
 8002b02:	f7fe be4d 	b.w	80017a0 <__retarget_lock_acquire_recursive>
 8002b06:	bf00      	nop
 8002b08:	20000200 	.word	0x20000200

08002b0c <__malloc_unlock>:
 8002b0c:	4801      	ldr	r0, [pc, #4]	; (8002b14 <__malloc_unlock+0x8>)
 8002b0e:	f7fe be48 	b.w	80017a2 <__retarget_lock_release_recursive>
 8002b12:	bf00      	nop
 8002b14:	20000200 	.word	0x20000200

08002b18 <_realloc_r>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	4607      	mov	r7, r0
 8002b1c:	4614      	mov	r4, r2
 8002b1e:	460e      	mov	r6, r1
 8002b20:	b921      	cbnz	r1, 8002b2c <_realloc_r+0x14>
 8002b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b26:	4611      	mov	r1, r2
 8002b28:	f7fe bf04 	b.w	8001934 <_malloc_r>
 8002b2c:	b922      	cbnz	r2, 8002b38 <_realloc_r+0x20>
 8002b2e:	f7fe feb7 	bl	80018a0 <_free_r>
 8002b32:	4625      	mov	r5, r4
 8002b34:	4628      	mov	r0, r5
 8002b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b38:	f000 f826 	bl	8002b88 <_malloc_usable_size_r>
 8002b3c:	42a0      	cmp	r0, r4
 8002b3e:	d20f      	bcs.n	8002b60 <_realloc_r+0x48>
 8002b40:	4621      	mov	r1, r4
 8002b42:	4638      	mov	r0, r7
 8002b44:	f7fe fef6 	bl	8001934 <_malloc_r>
 8002b48:	4605      	mov	r5, r0
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d0f2      	beq.n	8002b34 <_realloc_r+0x1c>
 8002b4e:	4631      	mov	r1, r6
 8002b50:	4622      	mov	r2, r4
 8002b52:	f7ff ffc7 	bl	8002ae4 <memcpy>
 8002b56:	4631      	mov	r1, r6
 8002b58:	4638      	mov	r0, r7
 8002b5a:	f7fe fea1 	bl	80018a0 <_free_r>
 8002b5e:	e7e9      	b.n	8002b34 <_realloc_r+0x1c>
 8002b60:	4635      	mov	r5, r6
 8002b62:	e7e7      	b.n	8002b34 <_realloc_r+0x1c>

08002b64 <_read_r>:
 8002b64:	b538      	push	{r3, r4, r5, lr}
 8002b66:	4d07      	ldr	r5, [pc, #28]	; (8002b84 <_read_r+0x20>)
 8002b68:	4604      	mov	r4, r0
 8002b6a:	4608      	mov	r0, r1
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	2200      	movs	r2, #0
 8002b70:	602a      	str	r2, [r5, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f000 f838 	bl	8002be8 <_read>
 8002b78:	1c43      	adds	r3, r0, #1
 8002b7a:	d102      	bne.n	8002b82 <_read_r+0x1e>
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	b103      	cbz	r3, 8002b82 <_read_r+0x1e>
 8002b80:	6023      	str	r3, [r4, #0]
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	2000020c 	.word	0x2000020c

08002b88 <_malloc_usable_size_r>:
 8002b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b8c:	1f18      	subs	r0, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bfbc      	itt	lt
 8002b92:	580b      	ldrlt	r3, [r1, r0]
 8002b94:	18c0      	addlt	r0, r0, r3
 8002b96:	4770      	bx	lr

08002b98 <_close>:
 8002b98:	4b02      	ldr	r3, [pc, #8]	; (8002ba4 <_close+0xc>)
 8002b9a:	2258      	movs	r2, #88	; 0x58
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba2:	4770      	bx	lr
 8002ba4:	2000020c 	.word	0x2000020c

08002ba8 <_fstat>:
 8002ba8:	4b02      	ldr	r3, [pc, #8]	; (8002bb4 <_fstat+0xc>)
 8002baa:	2258      	movs	r2, #88	; 0x58
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb2:	4770      	bx	lr
 8002bb4:	2000020c 	.word	0x2000020c

08002bb8 <_isatty>:
 8002bb8:	4b02      	ldr	r3, [pc, #8]	; (8002bc4 <_isatty+0xc>)
 8002bba:	2258      	movs	r2, #88	; 0x58
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	2000020c 	.word	0x2000020c

08002bc8 <_lseek>:
 8002bc8:	4b02      	ldr	r3, [pc, #8]	; (8002bd4 <_lseek+0xc>)
 8002bca:	2258      	movs	r2, #88	; 0x58
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd2:	4770      	bx	lr
 8002bd4:	2000020c 	.word	0x2000020c

08002bd8 <_open>:
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <_open+0xc>)
 8002bda:	2258      	movs	r2, #88	; 0x58
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f04f 30ff 	mov.w	r0, #4294967295
 8002be2:	4770      	bx	lr
 8002be4:	2000020c 	.word	0x2000020c

08002be8 <_read>:
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <_read+0xc>)
 8002bea:	2258      	movs	r2, #88	; 0x58
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf2:	4770      	bx	lr
 8002bf4:	2000020c 	.word	0x2000020c

08002bf8 <_write>:
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <_write+0xc>)
 8002bfa:	2258      	movs	r2, #88	; 0x58
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002c02:	4770      	bx	lr
 8002c04:	2000020c 	.word	0x2000020c

08002c08 <_init>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr

08002c14 <_fini>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr
